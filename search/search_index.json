{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Infotiv Autonomous Platform \u00b6 To increase the knowledge and expertise within the evolving automotive industry Infotiv developed the Infotiv Autonomous Platform. A multitude of thesis works, internships, and internal projects have been done with this platform and this has bettered Infotiv\u2019s competitive edge. The end goal of this series of projects is to have an autonomous go-kart, be it in a controlled test environment, that furthers development and research in the autonomous vehicle industry. When the gokart platform reaches a stable state, external research entities could use the platform to test and verify their ideas. Developing a platform that is closer to a car opens a multitude of developing opportunities as well as increases the value of the existing project, proving scalability. The research and development are done on the new gokart till face more similar issues as the industry are facing. Infotiv having this knowledge and how to solve these issues would further increase Infotiv\u2019s competitive edge. This platform will also allow the development of other types of driver-focused applications, some examples being lane assistance, driver interface, and adaptive cruise control. The goal of the project is to add a driver assistance system capable of performing functions such as Adaptive Cruise Control (ACC), Automated Lane Centering (ALC), Forward Collision Warning (FCW), and Lane Departure Warning (LDW) to the existing GoKart framework. The GoKart was the result of previous research within Infotiv. System Architecture \u00b6 The system is designed in three steps as a separated projects. Automotive platform Body electronics Autonomous Drive Download the PDF catalog here.","title":"Home"},{"location":"#infotiv-autonomous-platform","text":"To increase the knowledge and expertise within the evolving automotive industry Infotiv developed the Infotiv Autonomous Platform. A multitude of thesis works, internships, and internal projects have been done with this platform and this has bettered Infotiv\u2019s competitive edge. The end goal of this series of projects is to have an autonomous go-kart, be it in a controlled test environment, that furthers development and research in the autonomous vehicle industry. When the gokart platform reaches a stable state, external research entities could use the platform to test and verify their ideas. Developing a platform that is closer to a car opens a multitude of developing opportunities as well as increases the value of the existing project, proving scalability. The research and development are done on the new gokart till face more similar issues as the industry are facing. Infotiv having this knowledge and how to solve these issues would further increase Infotiv\u2019s competitive edge. This platform will also allow the development of other types of driver-focused applications, some examples being lane assistance, driver interface, and adaptive cruise control. The goal of the project is to add a driver assistance system capable of performing functions such as Adaptive Cruise Control (ACC), Automated Lane Centering (ALC), Forward Collision Warning (FCW), and Lane Departure Warning (LDW) to the existing GoKart framework. The GoKart was the result of previous research within Infotiv.","title":"Infotiv Autonomous Platform"},{"location":"#system-architecture","text":"The system is designed in three steps as a separated projects. Automotive platform Body electronics Autonomous Drive Download the PDF catalog here.","title":"System Architecture"},{"location":"autonomous/","text":"Autonomous Drive \u00b6 OpenPilot Integration \u00b6 cd openpilot && pipenv shell cd ~/openpilot/selfdrive/manager PASSIVE = 0 NOSENSOR = 1 USE_WEBCAM = 1 ./manager.py docker ps docker kill openpilot_client","title":"Autonomous Drive"},{"location":"autonomous/#autonomous-drive","text":"","title":"Autonomous Drive"},{"location":"autonomous/#openpilot-integration","text":"cd openpilot && pipenv shell cd ~/openpilot/selfdrive/manager PASSIVE = 0 NOSENSOR = 1 USE_WEBCAM = 1 ./manager.py docker ps docker kill openpilot_client","title":"OpenPilot Integration"},{"location":"bodyelec/","text":"Body Electronics \u00b6 The intended use case of the delivered package is to add a car body electronics to the Infotiv Autonomous Platform including lights, sensors, horn and monitor displaying the platform power mode and a simulated key. As the aim for the platform is the possibility to model real life situations with full size cars as closely as possible, the autonomous Go-kart platform need hardware that mimics a real car. That includes Body Electronics: headlights, taillights, turn indicators and horn. They will be of use as visualization tools in the development of driving assistance and autonomous functions that ultimately aims at making traffic safer. Power Mode is the functional state of the car, ordinarily controlled by the car key. Depending on the Power Mode, CEM (Central Electronic Module) controls the following functionalities Headlights / Taillights Blinkers Horn Moodlight Delivered functinalities: Headlights connected to the CEM (Central Electronic Module) with two intensity settings Taillights connected to the CEM, with two intensity settings Turn indicators connected to the CEM, individually controllable (R/L/Emergency) Sonar sensors mounted on the go-kart (three in front, three in the back), connected to the safety CAN bus, sending distance values. Horn connected to the CEM, low and high volume. CAN signal interface to each function, fully abstracted from actual hardware implementation Power moding implementation, where headlights turn on low intensity when power mode is \u2018Armed\u2019. Modes: sleep, locked, unlocked, key out, key in, accessory, on, running. (Radar sensors connected to the ADAS, check alternatives to the Acconeer sensors) \u2018Mood light\u2019 RGB LED status indicator to tell the user what the car is \u2018thinking\u2019, visible from the other side of a gokart track. To learn more about the requirements please check protectedDocuments/2020 - Infotiv Autonomous Platform, Body Electronics Intern work Package folder ( Protected document )","title":"Body Electronics"},{"location":"bodyelec/#body-electronics","text":"The intended use case of the delivered package is to add a car body electronics to the Infotiv Autonomous Platform including lights, sensors, horn and monitor displaying the platform power mode and a simulated key. As the aim for the platform is the possibility to model real life situations with full size cars as closely as possible, the autonomous Go-kart platform need hardware that mimics a real car. That includes Body Electronics: headlights, taillights, turn indicators and horn. They will be of use as visualization tools in the development of driving assistance and autonomous functions that ultimately aims at making traffic safer. Power Mode is the functional state of the car, ordinarily controlled by the car key. Depending on the Power Mode, CEM (Central Electronic Module) controls the following functionalities Headlights / Taillights Blinkers Horn Moodlight Delivered functinalities: Headlights connected to the CEM (Central Electronic Module) with two intensity settings Taillights connected to the CEM, with two intensity settings Turn indicators connected to the CEM, individually controllable (R/L/Emergency) Sonar sensors mounted on the go-kart (three in front, three in the back), connected to the safety CAN bus, sending distance values. Horn connected to the CEM, low and high volume. CAN signal interface to each function, fully abstracted from actual hardware implementation Power moding implementation, where headlights turn on low intensity when power mode is \u2018Armed\u2019. Modes: sleep, locked, unlocked, key out, key in, accessory, on, running. (Radar sensors connected to the ADAS, check alternatives to the Acconeer sensors) \u2018Mood light\u2019 RGB LED status indicator to tell the user what the car is \u2018thinking\u2019, visible from the other side of a gokart track. To learn more about the requirements please check protectedDocuments/2020 - Infotiv Autonomous Platform, Body Electronics Intern work Package folder ( Protected document )","title":"Body Electronics"},{"location":"changelog/","text":"Change Log \u00b6 All notable changes to this project will be documented in this file. Gokart documentation Version 1.0 * 2022-07-25 \u00b6 The project is started with the following sections by Hamid Ebadi Infotiv Autonomous Platform Contact Infotiv Glossary of Terms High Level Architecture Architecture Automotive Platform Body Electronics Autonomous Drive Components HW and Board Components Interfaces and Sensors Software Repositories Usage Manual Start the GoKart Common Issues For Developers","title":"ChangeLog"},{"location":"changelog/#change-log","text":"All notable changes to this project will be documented in this file.","title":"Change Log"},{"location":"changelog/#gokart-documentation-version-10-2022-07-25","text":"The project is started with the following sections by Hamid Ebadi Infotiv Autonomous Platform Contact Infotiv Glossary of Terms High Level Architecture Architecture Automotive Platform Body Electronics Autonomous Drive Components HW and Board Components Interfaces and Sensors Software Repositories Usage Manual Start the GoKart Common Issues For Developers","title":"Gokart documentation Version 1.0 * 2022-07-25"},{"location":"components/","text":"Main Hardware Components \u00b6 ECUs: CEM, ADAS, BMS, ECM/VCU, OBC, DC/DC, IHU, TEM Radar (4) Lidar (1) Ultrasonic (4) Camera (1) Stereo vision (1) HV \u2013 battery (1) LV \u2013 battery (1) Motors (4) Wheel speed sensors (4) OBD2 connector (1) Charging connector (1) GPS (no function) Ninebot S Ninebot Go-Kart: Manufacturer More information about the internals: Segway miniPRO Teardown Communication between these parts are analysed in the protectedDocuments/Gokart Serielanalys/Kommunikation f\u00f6r Gokart.docx ( Protected document ) NVIDIA Jetson TX2 Developer Kit \u00b6 A backup of the system image is in the internal sharepoint ( Protected document ) . You can connect an HDMI cable to the ECU or connect to it remotely. The username for the image is gokart1 and the password is ( Protected document ) . $ uname -an Linux dobby 4 .9.140-tegra #1 SMP PREEMPT Tue Oct 27 21:02:46 PDT 2020 aarch64 aarch64 aarch64 GNU/Linux $ ps aux | grep ros gokart1 5668 0 .4 0 .7 283996 56980 ? Sl 12 :45 0 :04 /usr/bin/python /opt/ros/melodic/bin/roscore gokart1 6559 0 .4 0 .6 798264 54952 ? Ssl 12 :45 0 :03 /usr/bin/python /opt/ros/melodic/bin/rosmaster --core -p 11311 -w 3 __log: = /home/gokart1/.ros/log/1381b99e-ebcf-11ec-8300-65d39938f186/master.log gokart1 6577 0 .3 0 .1 338648 9548 ? Ssl 12 :45 0 :03 /opt/ros/melodic/lib/rosout/rosout __name: = rosout __log: = /home/gokart1/.ros/log/1381b99e-ebcf-11ec-8300-65d39938f186/rosout-1.log gokart1 6587 0 .0 0 .0 1912 1192 ? Ss 12 :45 0 :00 /bin/sh -c . /opt/ros/melodic/setup.sh ; . /etc/ros/env.sh ; . /home/gokart1/SSD/ROS_projects/RosCanBus/devel/setup.sh ; rosrun roscanbus roscanbus_node gokart1 6588 0 .0 0 .0 1912 1212 ? Ss 12 :45 0 :00 /bin/sh -c . /opt/ros/melodic/setup.sh ; . /etc/ros/env.sh ; roslaunch usb_cam vision_stack.launch gokart1 6596 0 .0 0 .0 1912 1124 ? Ss 12 :45 0 :00 /bin/sh -c . /opt/ros/melodic/setup.sh ; . /etc/ros/env.sh ; roslaunch rplidar_ros rplidar.launch gokart1 6703 0 .4 0 .6 283360 54376 ? Sl 12 :45 0 :03 /usr/bin/python /opt/ros/melodic/bin/roslaunch usb_cam vision_stack.launch gokart1 6704 0 .4 0 .6 283360 54692 ? Sl 12 :45 0 :03 /usr/bin/python /opt/ros/melodic/bin/roslaunch rplidar_ros rplidar.launch gokart1 6725 12 .6 0 .2 363692 17588 ? Sl 12 :45 1 :45 /home/olle/SSD/ROS_projects/RosCanBus/devel/lib/roscanbus/roscanbus_node gokart1 7202 1 .0 0 .1 347056 11700 ? Ssl 12 :45 0 :08 /opt/ros/melodic/lib/rplidar_ros/rplidarNode __name: = A2_lidar_node __log: = /home/gokart1/.ros/log/1381b99e-ebcf-11ec-8300-65d39938f186/A2-A2_lidar_node-1.log gokart1 7207 5 .1 0 .1 347056 9788 ? Ssl 12 :45 0 :42 /opt/ros/melodic/lib/rplidar_ros/rplidarNode __name: = S1_lidar_node __log: = /home/gokart1/.ros/log/1381b99e-ebcf-11ec-8300-65d39938f186/S1-S1_lidar_node-2.log gokart1 7225 0 .3 0 .7 451228 58924 ? Ssl 12 :45 0 :02 /opt/ros/melodic/lib/image_proc/image_proc __name: = image_proc __log: = /home/gokart1/.ros/log/1381b99e-ebcf-11ec-8300-65d39938f186/usb_cam-image_proc-2.log gokart1 8437 0 .5 0 .5 461908 45180 ? Sl 12 :46 0 :04 gedit /home/gokart1/hamid/rostopic.txt gokart1 8781 0 .5 0 .6 361616 54632 pts/0 Sl+ 12 :47 0 :03 /usr/bin/python2 /opt/ros/melodic/bin/rostopic pub /Speed_Request_Turn std_msgs/Float32 10 gokart1 9503 0 .0 0 .0 7216 644 pts/2 S+ 12 :59 0 :00 grep --color = auto ros STM32F103C8T6 - \"Blue Pill\" Development Board \u00b6 The Blue Pill is a development board based on ST Microelectronics\u2019 STM32F103C8T6 microcontroller that has an ARM Cortex-M3 core that runs at 72MHz max. Most of the ECUs on the Infotiv Autonomous Platform, including the CEM, ADAS_DK and VCU are based on STM32s, coded in C++ in Infotiv\u2019s own embedded framework. Check this document for start-up guide for autonomous platform and STM32 2019 - Praktik, Elschema och BOM f\u00f6r bilplatform/Platform V1/Bilplattform_STM32.pdf ( Protected document ) Arduino Nano \u00b6 The Arduino Nano is a small, complete development board based on the ATmega328 (Arduino Nano 3. x). It has more or less the same functionality as the Arduino Uno, but in a different package. It was used for the simple task of the CEM_DK (Power Mode requests + screen feedback) due to it\u2019s small physical footprint. MCP2515 / TJA1050 CAN transceiver \u00b6 This module combines the MCP2515 CAN controller with the TJA1050 CAN transceiver to a standalone unit that connects directly to the CAN-bus on one end and via SPI to the microcontroller on the other end. Most ECUs on the Autonomous Platform use one of these modules for CAN communication, and the CEM is equipped with three CAN transceivers, one for each bus. HC-SR04 sonar sensor \u00b6 This sensor uses ultrasonic sound to measure distance to objects in it\u2019s way. It\u2019s working range is specified to between 20 to 4000 mm. It\u2019s simple to set up but has a drawback in it\u2019s quite narrow field of vision. To compensate for this we use six sensors on the Gokart. EMG49 - Gear motor with encoder \u00b6 3D printed parts \u00b6 The 3D model files can be found in protectedDocuments/2020 - Infotiv Autonomous Platform, Body Electronics Intern work Package/Gokart 3D models folder ( Protected document ) Battery and Battery Monitoring System \u00b6 To power the Body Electronics circuit require a battery of type Lipo 5000mAh 5S 25C Lipo Pack w/XT90. A LM2596 buck converter is used to step down the voltage from the battery to 12V powering the circuit The ECUs are powered by another Lipo battery with another buck converter that steps down to 5V. HV \u2013 battery LV \u2013 battery Turnigy nano-tech 4000mah 3S 25~50C Lipo Pack w/XT-60 2021 Gokart schematics Battery Monitoring System PCB Schematics are available at protectedDocuments/2021 Gokart schematics ( Protected document )","title":"HW and Board Components"},{"location":"components/#main-hardware-components","text":"ECUs: CEM, ADAS, BMS, ECM/VCU, OBC, DC/DC, IHU, TEM Radar (4) Lidar (1) Ultrasonic (4) Camera (1) Stereo vision (1) HV \u2013 battery (1) LV \u2013 battery (1) Motors (4) Wheel speed sensors (4) OBD2 connector (1) Charging connector (1) GPS (no function) Ninebot S Ninebot Go-Kart: Manufacturer More information about the internals: Segway miniPRO Teardown Communication between these parts are analysed in the protectedDocuments/Gokart Serielanalys/Kommunikation f\u00f6r Gokart.docx ( Protected document )","title":"Main Hardware Components"},{"location":"components/#nvidia-jetson-tx2-developer-kit","text":"A backup of the system image is in the internal sharepoint ( Protected document ) . You can connect an HDMI cable to the ECU or connect to it remotely. The username for the image is gokart1 and the password is ( Protected document ) . $ uname -an Linux dobby 4 .9.140-tegra #1 SMP PREEMPT Tue Oct 27 21:02:46 PDT 2020 aarch64 aarch64 aarch64 GNU/Linux $ ps aux | grep ros gokart1 5668 0 .4 0 .7 283996 56980 ? Sl 12 :45 0 :04 /usr/bin/python /opt/ros/melodic/bin/roscore gokart1 6559 0 .4 0 .6 798264 54952 ? Ssl 12 :45 0 :03 /usr/bin/python /opt/ros/melodic/bin/rosmaster --core -p 11311 -w 3 __log: = /home/gokart1/.ros/log/1381b99e-ebcf-11ec-8300-65d39938f186/master.log gokart1 6577 0 .3 0 .1 338648 9548 ? Ssl 12 :45 0 :03 /opt/ros/melodic/lib/rosout/rosout __name: = rosout __log: = /home/gokart1/.ros/log/1381b99e-ebcf-11ec-8300-65d39938f186/rosout-1.log gokart1 6587 0 .0 0 .0 1912 1192 ? Ss 12 :45 0 :00 /bin/sh -c . /opt/ros/melodic/setup.sh ; . /etc/ros/env.sh ; . /home/gokart1/SSD/ROS_projects/RosCanBus/devel/setup.sh ; rosrun roscanbus roscanbus_node gokart1 6588 0 .0 0 .0 1912 1212 ? Ss 12 :45 0 :00 /bin/sh -c . /opt/ros/melodic/setup.sh ; . /etc/ros/env.sh ; roslaunch usb_cam vision_stack.launch gokart1 6596 0 .0 0 .0 1912 1124 ? Ss 12 :45 0 :00 /bin/sh -c . /opt/ros/melodic/setup.sh ; . /etc/ros/env.sh ; roslaunch rplidar_ros rplidar.launch gokart1 6703 0 .4 0 .6 283360 54376 ? Sl 12 :45 0 :03 /usr/bin/python /opt/ros/melodic/bin/roslaunch usb_cam vision_stack.launch gokart1 6704 0 .4 0 .6 283360 54692 ? Sl 12 :45 0 :03 /usr/bin/python /opt/ros/melodic/bin/roslaunch rplidar_ros rplidar.launch gokart1 6725 12 .6 0 .2 363692 17588 ? Sl 12 :45 1 :45 /home/olle/SSD/ROS_projects/RosCanBus/devel/lib/roscanbus/roscanbus_node gokart1 7202 1 .0 0 .1 347056 11700 ? Ssl 12 :45 0 :08 /opt/ros/melodic/lib/rplidar_ros/rplidarNode __name: = A2_lidar_node __log: = /home/gokart1/.ros/log/1381b99e-ebcf-11ec-8300-65d39938f186/A2-A2_lidar_node-1.log gokart1 7207 5 .1 0 .1 347056 9788 ? Ssl 12 :45 0 :42 /opt/ros/melodic/lib/rplidar_ros/rplidarNode __name: = S1_lidar_node __log: = /home/gokart1/.ros/log/1381b99e-ebcf-11ec-8300-65d39938f186/S1-S1_lidar_node-2.log gokart1 7225 0 .3 0 .7 451228 58924 ? Ssl 12 :45 0 :02 /opt/ros/melodic/lib/image_proc/image_proc __name: = image_proc __log: = /home/gokart1/.ros/log/1381b99e-ebcf-11ec-8300-65d39938f186/usb_cam-image_proc-2.log gokart1 8437 0 .5 0 .5 461908 45180 ? Sl 12 :46 0 :04 gedit /home/gokart1/hamid/rostopic.txt gokart1 8781 0 .5 0 .6 361616 54632 pts/0 Sl+ 12 :47 0 :03 /usr/bin/python2 /opt/ros/melodic/bin/rostopic pub /Speed_Request_Turn std_msgs/Float32 10 gokart1 9503 0 .0 0 .0 7216 644 pts/2 S+ 12 :59 0 :00 grep --color = auto ros","title":"NVIDIA Jetson TX2 Developer Kit"},{"location":"components/#stm32f103c8t6-blue-pill-development-board","text":"The Blue Pill is a development board based on ST Microelectronics\u2019 STM32F103C8T6 microcontroller that has an ARM Cortex-M3 core that runs at 72MHz max. Most of the ECUs on the Infotiv Autonomous Platform, including the CEM, ADAS_DK and VCU are based on STM32s, coded in C++ in Infotiv\u2019s own embedded framework. Check this document for start-up guide for autonomous platform and STM32 2019 - Praktik, Elschema och BOM f\u00f6r bilplatform/Platform V1/Bilplattform_STM32.pdf ( Protected document )","title":"STM32F103C8T6 - \"Blue Pill\" Development Board"},{"location":"components/#arduino-nano","text":"The Arduino Nano is a small, complete development board based on the ATmega328 (Arduino Nano 3. x). It has more or less the same functionality as the Arduino Uno, but in a different package. It was used for the simple task of the CEM_DK (Power Mode requests + screen feedback) due to it\u2019s small physical footprint.","title":"Arduino Nano"},{"location":"components/#mcp2515-tja1050-can-transceiver","text":"This module combines the MCP2515 CAN controller with the TJA1050 CAN transceiver to a standalone unit that connects directly to the CAN-bus on one end and via SPI to the microcontroller on the other end. Most ECUs on the Autonomous Platform use one of these modules for CAN communication, and the CEM is equipped with three CAN transceivers, one for each bus.","title":"MCP2515 / TJA1050 CAN transceiver"},{"location":"components/#hc-sr04-sonar-sensor","text":"This sensor uses ultrasonic sound to measure distance to objects in it\u2019s way. It\u2019s working range is specified to between 20 to 4000 mm. It\u2019s simple to set up but has a drawback in it\u2019s quite narrow field of vision. To compensate for this we use six sensors on the Gokart.","title":"HC-SR04 sonar sensor"},{"location":"components/#emg49-gear-motor-with-encoder","text":"","title":"EMG49 - Gear motor with encoder"},{"location":"components/#3d-printed-parts","text":"The 3D model files can be found in protectedDocuments/2020 - Infotiv Autonomous Platform, Body Electronics Intern work Package/Gokart 3D models folder ( Protected document )","title":"3D printed parts"},{"location":"components/#battery-and-battery-monitoring-system","text":"To power the Body Electronics circuit require a battery of type Lipo 5000mAh 5S 25C Lipo Pack w/XT90. A LM2596 buck converter is used to step down the voltage from the battery to 12V powering the circuit The ECUs are powered by another Lipo battery with another buck converter that steps down to 5V. HV \u2013 battery LV \u2013 battery Turnigy nano-tech 4000mah 3S 25~50C Lipo Pack w/XT-60 2021 Gokart schematics Battery Monitoring System PCB Schematics are available at protectedDocuments/2021 Gokart schematics ( Protected document )","title":"Battery and Battery Monitoring System"},{"location":"contact/","text":"Contact us \u00b6 If you are not among our customers or partners and interested to know more about our autonomous platform, please contact Tomas Sj\u00f6gren ( Tomas.Sjogren@infotiv.se ) and Fredrik Lundgren ( Fredrik.Lundgren@infotiv.se ). Research Partners \u00b6 We shares details of the design with our research partners and customers. For technical questions please contact Hamid Ebadi ( Hamid.Ebadi@infotiv.se ), Martin Karsberg ( Martin.Karsberg@infotiv.se ) and Tobias.Wadseth ( Tobias.Wadseth@infotiv.se ).","title":"Contact Infotiv"},{"location":"contact/#contact-us","text":"If you are not among our customers or partners and interested to know more about our autonomous platform, please contact Tomas Sj\u00f6gren ( Tomas.Sjogren@infotiv.se ) and Fredrik Lundgren ( Fredrik.Lundgren@infotiv.se ).","title":"Contact us"},{"location":"contact/#research-partners","text":"We shares details of the design with our research partners and customers. For technical questions please contact Hamid Ebadi ( Hamid.Ebadi@infotiv.se ), Martin Karsberg ( Martin.Karsberg@infotiv.se ) and Tobias.Wadseth ( Tobias.Wadseth@infotiv.se ).","title":"Research Partners"},{"location":"dev/","text":"building RosCanBus \u00b6 root of the ROSCANBUS project is /home/olle/SSD/ROS_projects/RosCanBus/src/roscanbus for building the project # To run the ruscanbus node: kill -9 `pidof roscanbus_node` ; kill -9 `pidof roscore` ; roscore & kill -9 `pidof roscanbus_node` ; source /opt/ros/melodic/setup.sh; cd /home/olle/SSD/ROS_projects/RosCanBus; /home/olle/SSD/ROS_projects/RosCanBus/src/roscanbus/build/devel/lib/roscanbus/roscanbus_node Services \u00b6 To install services you need to use the following repository : /etc/systemd/system/ [Unit] After=roscore.service After=NetworkManager.service time-sync.target [Service] User=gokart1 WorkingDirectory=/home/gokart1/SSD/ROS_projects/RosCanBus ExecStart=/bin/sh -c \". /opt/ros/melodic/setup.sh; . /etc/ros/env.sh; /home/olle/SSD/ROS_projects/RosCanBus/src/roscanbus/build/devel/lib/roscanbus/roscanbus_node\" [Install] WantedBy=multi-user.target sudo systemctl enable roscanbus.service sudo systemctl start roscanbus.service sudo systemctl status roscanbus.service gokart_controller on remote client machine \u00b6 ** Make sure roscanbus_node is running on GoKart ** sudo apt-get install -y ros-sensor-msgs export ROS_MASTER_URI = http://dobby.local:11311 export ROS_IP = 192 .168.150.XXX # ip address of the client machine source /opt/ros/noetic/setup.bash ############## VERY IMPORTANT cd gokart_controller python3 test.py Local git setup \u00b6 Host gitlab.infotivlab.se Hostname 10.0.4.27 IdentityFile ~/.ssh/id_rsa User git STM32 Blue Pill Development environment \u00b6 sudo apt-get install gcc-arm-none-eabi libnewlib-arm-none-eabi arm-none-eabi-newlib # arch apt-get install openocd Install Visual Studio Code a. sudo apt update b. sudo apt install snapd c. sudo snap install --classic code Install apps sudo apt install git openocd gdb-multiarch gcc-arm-none-eabi libnewlib-arm-none-eabi Link together multiarch and gdb a. Find path of \"gdb-multiarch\", should be /usr/bin/gdb-multiarch b. sudo ln -s /usr/bin/gdb-multiarch /usr/bin/arm-none-eabi-gdb Install build essential sudo apt-get install build-essential Install st-link drivers a. sudo apt install git b. sudo apt install cmake c. sudo apt install gcc d. sudo apt install libusb-1.0 e. git clone https://github.com/texane/stlink.git f. cd stlink g. make release h. cd build/Release i. sudo make install Connect ST-Link to STM32 ST-Link STM32 Pin 1 3v3 Pin 7 SWIO Pin 9 SWCLK Pin 20 GND Install plugins a. Start VS code by typing \"code\" in terminal b. Ctrl+shift+x in VS code and install extensions C/C++ and Cortex-Debug c. If you are not working with the CEM, exchange the statements in the launch.json to correspond with the module you are working with (BMS, VCU etc) Download repository a. git clone HTTPS_link git clone -b branch_name HTTPS_link (specific branch) b. cd into directory c. git submodule update \u2013recursive --init Create .elf a. make gen_all b. make First test a. Open the autonomous platform folder in VS code b. Make sure the STM32 is connected via USB and ST-link c. Start debugging (f5) d. This should build the project, upload it to the STM32, the ST-link should start blinking G/R and once uploaded the led on the STM should blink at 1Hz. ST-LINK dongle to the Blue Pill connection \u00b6 Flash VCPU \u00b6 Create a file called openocd.cfg source [find interface/stlink-v2.cfg] source [find target/stm32f1x.cfg] and run openocd -f openocd.cfg : Open On-Chip Debugger 0.10.0 Licensed under GNU GPL v2 For bug reports, read http://openocd.org/doc/doxygen/bugs.html Info : auto-selecting first available session transport \"hla_swd\". To override use 'transport select <transport>'. Info : The selected transport took over low-level target control. The results might differ compared to plain JTAG/SWD adapter speed: 1000 kHz adapter_nsrst_delay: 100 none separate Info : Unable to match requested speed 1000 kHz, using 950 kHz Info : Unable to match requested speed 1000 kHz, using 950 kHz Info : clock speed 950 kHz Info : STLINK v2 JTAG v29 API v2 SWIM v7 VID 0x0483 PID 0x3748 Info : using stlink api v2 Info : Target voltage: 3.253369 Info : stm32f1x.cpu: hardware has 6 breakpoints, 4 watchpoints Patch for gokart_vcu: update platform/arch/stm32/board/stm32f103board.mk from openocd -f board/stm32f103bp.cfg -c \"program $(BUILDDIR)/$(PROJECT_NAME).elf verify reset exit\" to openocd -f openocd.cfg -c \"program $(BUILDDIR)/$(PROJECT_NAME).elf verify reset exit\" make clean make make gen_all make upload_stlink # make upload for st_nucleo Should results in: openocd -f openocd.cfg -c \"program build-stm32f103board/VCU.elf verify reset exit\" Open On-Chip Debugger 0 .10.0 Licensed under GNU GPL v2 For bug reports, read http://openocd.org/doc/doxygen/bugs.html Info : auto-selecting first available session transport \"hla_swd\" . To override use 'transport select <transport>' . Info : The selected transport took over low-level target control. The results might differ compared to plain JTAG/SWD adapter speed: 1000 kHz adapter_nsrst_delay: 100 none separate Info : Unable to match requested speed 1000 kHz, using 950 kHz Info : Unable to match requested speed 1000 kHz, using 950 kHz Info : clock speed 950 kHz Info : STLINK v2 JTAG v38 API v2 SWIM v7 VID 0x0483 PID 0x3748 Info : using stlink api v2 Info : Target voltage: 2 .869531 Info : stm32f1x.cpu: hardware has 6 breakpoints, 4 watchpoints target halted due to debug-request, current mode: Thread xPSR: 0x01000000 pc: 0x080048c4 msp: 0x20004ffc ** Programming Started ** auto erase enabled Info : device id = 0x20036410 Info : flash size = 64kbytes target halted due to breakpoint, current mode: Thread xPSR: 0x61000000 pc: 0x2000003a msp: 0x20004ffc wrote 21504 bytes from file build-stm32f103board/VCU.elf in 1 .232481s ( 17 .039 KiB/s ) ** Programming Finished ** ** Verify Started ** target halted due to breakpoint, current mode: Thread xPSR: 0x61000000 pc: 0x2000002e msp: 0x20004ffc target halted due to breakpoint, current mode: Thread xPSR: 0x61000000 pc: 0x2000002e msp: 0x20004ffc verified 20656 bytes in 0 .355877s ( 56 .682 KiB/s ) ** Verified OK ** ** Resetting Target ** shutdown command invoked make [ 1 ] : Leaving directory '/home/hamid/repositories/GOKART/gokart_vcu' Debug messages \u00b6 To see the debug messages that are shown in the serial port with logger.error() function: sudo miniterm /dev/ttyUSB0 115200 [ 33 ; 1m [ WARNING ] \u241b [ 0m No message from CAN. Restarting MCP2515 SSH keys \u00b6 There are already one ssh key added as an auithorized key to the gokart. copy the content of /protectedDocuments/SSHKeys ( Protected document ) to ~/.ssh/ directory. You will be able to connect to gokart without using password as below ssh gokart1@dobby.local As an example you can shutdown the jetson board like this: ssh gokart1@dobby.local \"shutdown -h now\" Patches \u00b6 Patches for fixing the issue with remote control void RcView::updateSpeedPulse() { speedData_ = RC_SPEED_INPUT.get(); if(speedData_ == 1 && previousSpeedData_ != 1) { speedStartTime_ = get_system_time_ns(); } else if(speedData_ == 0 && previousSpeedData_ == 1) { speedEndTime_ = get_system_time_ns(); if(speedEndTime_ - speedStartTime_ > minSpeedPulse_ && speedEndTime_ - speedStartTime_ < maxSpeedPulse_) //Remove all misscalculations when timer overflows. { speedPulse_ = speedEndTime_ - speedStartTime_; float speedReq = linearConversion(speedPulse_, minSpeedPulse_, maxSpeedPulse_, 0, 1); if (speedReq > 1) speedReq = 1; else if (speedReq < 0) speedReq = 0; if(speedReq > 0.55) //Acceleration signal { speedReq = (speedReq - 0.55) / (0.45); gokartModel_->setSpeedRequest(speedReq); } else if(speedReq < 0.45) //brake signal { float brake_req = (speedReq / 0.45); gokartModel_->setBrakeRequest(brake_req); } else { gokartModel_->setSpeedRequest(0); gokartModel_->setBrakeRequest(0); } } } previousSpeedData_ = speedData_; } The left steering is not implemented correctly or NOT at all gokart_controller / gokart_controller.py def set_power_enable(self): raise NotImplementedError def set_speed(self, speed): raise NotImplementedError def set_turn_rate(self, degrees): raise NotImplementedError last commit on gokart/Gokart_VCU src/controllers/GokartController.cpp - #define minTurnPWM_ 0.069 - #define maxTurnPWM_ 0.051 + #define minTurnPWM_ 0.074 + #define maxTurnPWM_ 0.047 src/views/RcView.h - static const int minTurnPulse_ = 1130000; - static const int maxTurnPulse_ = 1930000; + static const int minTurnPulse_ = 1050000; + static const int maxTurnPulse_ = 1850000;","title":"For Developers"},{"location":"dev/#building-roscanbus","text":"root of the ROSCANBUS project is /home/olle/SSD/ROS_projects/RosCanBus/src/roscanbus for building the project # To run the ruscanbus node: kill -9 `pidof roscanbus_node` ; kill -9 `pidof roscore` ; roscore & kill -9 `pidof roscanbus_node` ; source /opt/ros/melodic/setup.sh; cd /home/olle/SSD/ROS_projects/RosCanBus; /home/olle/SSD/ROS_projects/RosCanBus/src/roscanbus/build/devel/lib/roscanbus/roscanbus_node","title":"building RosCanBus"},{"location":"dev/#services","text":"To install services you need to use the following repository : /etc/systemd/system/ [Unit] After=roscore.service After=NetworkManager.service time-sync.target [Service] User=gokart1 WorkingDirectory=/home/gokart1/SSD/ROS_projects/RosCanBus ExecStart=/bin/sh -c \". /opt/ros/melodic/setup.sh; . /etc/ros/env.sh; /home/olle/SSD/ROS_projects/RosCanBus/src/roscanbus/build/devel/lib/roscanbus/roscanbus_node\" [Install] WantedBy=multi-user.target sudo systemctl enable roscanbus.service sudo systemctl start roscanbus.service sudo systemctl status roscanbus.service","title":"Services"},{"location":"dev/#gokart_controller-on-remote-client-machine","text":"** Make sure roscanbus_node is running on GoKart ** sudo apt-get install -y ros-sensor-msgs export ROS_MASTER_URI = http://dobby.local:11311 export ROS_IP = 192 .168.150.XXX # ip address of the client machine source /opt/ros/noetic/setup.bash ############## VERY IMPORTANT cd gokart_controller python3 test.py","title":"gokart_controller on remote client machine"},{"location":"dev/#local-git-setup","text":"Host gitlab.infotivlab.se Hostname 10.0.4.27 IdentityFile ~/.ssh/id_rsa User git","title":"Local git setup"},{"location":"dev/#stm32-blue-pill-development-environment","text":"sudo apt-get install gcc-arm-none-eabi libnewlib-arm-none-eabi arm-none-eabi-newlib # arch apt-get install openocd Install Visual Studio Code a. sudo apt update b. sudo apt install snapd c. sudo snap install --classic code Install apps sudo apt install git openocd gdb-multiarch gcc-arm-none-eabi libnewlib-arm-none-eabi Link together multiarch and gdb a. Find path of \"gdb-multiarch\", should be /usr/bin/gdb-multiarch b. sudo ln -s /usr/bin/gdb-multiarch /usr/bin/arm-none-eabi-gdb Install build essential sudo apt-get install build-essential Install st-link drivers a. sudo apt install git b. sudo apt install cmake c. sudo apt install gcc d. sudo apt install libusb-1.0 e. git clone https://github.com/texane/stlink.git f. cd stlink g. make release h. cd build/Release i. sudo make install Connect ST-Link to STM32 ST-Link STM32 Pin 1 3v3 Pin 7 SWIO Pin 9 SWCLK Pin 20 GND Install plugins a. Start VS code by typing \"code\" in terminal b. Ctrl+shift+x in VS code and install extensions C/C++ and Cortex-Debug c. If you are not working with the CEM, exchange the statements in the launch.json to correspond with the module you are working with (BMS, VCU etc) Download repository a. git clone HTTPS_link git clone -b branch_name HTTPS_link (specific branch) b. cd into directory c. git submodule update \u2013recursive --init Create .elf a. make gen_all b. make First test a. Open the autonomous platform folder in VS code b. Make sure the STM32 is connected via USB and ST-link c. Start debugging (f5) d. This should build the project, upload it to the STM32, the ST-link should start blinking G/R and once uploaded the led on the STM should blink at 1Hz.","title":"STM32 Blue Pill Development environment"},{"location":"dev/#st-link-dongle-to-the-blue-pill-connection","text":"","title":"ST-LINK dongle to the Blue Pill connection"},{"location":"dev/#flash-vcpu","text":"Create a file called openocd.cfg source [find interface/stlink-v2.cfg] source [find target/stm32f1x.cfg] and run openocd -f openocd.cfg : Open On-Chip Debugger 0.10.0 Licensed under GNU GPL v2 For bug reports, read http://openocd.org/doc/doxygen/bugs.html Info : auto-selecting first available session transport \"hla_swd\". To override use 'transport select <transport>'. Info : The selected transport took over low-level target control. The results might differ compared to plain JTAG/SWD adapter speed: 1000 kHz adapter_nsrst_delay: 100 none separate Info : Unable to match requested speed 1000 kHz, using 950 kHz Info : Unable to match requested speed 1000 kHz, using 950 kHz Info : clock speed 950 kHz Info : STLINK v2 JTAG v29 API v2 SWIM v7 VID 0x0483 PID 0x3748 Info : using stlink api v2 Info : Target voltage: 3.253369 Info : stm32f1x.cpu: hardware has 6 breakpoints, 4 watchpoints Patch for gokart_vcu: update platform/arch/stm32/board/stm32f103board.mk from openocd -f board/stm32f103bp.cfg -c \"program $(BUILDDIR)/$(PROJECT_NAME).elf verify reset exit\" to openocd -f openocd.cfg -c \"program $(BUILDDIR)/$(PROJECT_NAME).elf verify reset exit\" make clean make make gen_all make upload_stlink # make upload for st_nucleo Should results in: openocd -f openocd.cfg -c \"program build-stm32f103board/VCU.elf verify reset exit\" Open On-Chip Debugger 0 .10.0 Licensed under GNU GPL v2 For bug reports, read http://openocd.org/doc/doxygen/bugs.html Info : auto-selecting first available session transport \"hla_swd\" . To override use 'transport select <transport>' . Info : The selected transport took over low-level target control. The results might differ compared to plain JTAG/SWD adapter speed: 1000 kHz adapter_nsrst_delay: 100 none separate Info : Unable to match requested speed 1000 kHz, using 950 kHz Info : Unable to match requested speed 1000 kHz, using 950 kHz Info : clock speed 950 kHz Info : STLINK v2 JTAG v38 API v2 SWIM v7 VID 0x0483 PID 0x3748 Info : using stlink api v2 Info : Target voltage: 2 .869531 Info : stm32f1x.cpu: hardware has 6 breakpoints, 4 watchpoints target halted due to debug-request, current mode: Thread xPSR: 0x01000000 pc: 0x080048c4 msp: 0x20004ffc ** Programming Started ** auto erase enabled Info : device id = 0x20036410 Info : flash size = 64kbytes target halted due to breakpoint, current mode: Thread xPSR: 0x61000000 pc: 0x2000003a msp: 0x20004ffc wrote 21504 bytes from file build-stm32f103board/VCU.elf in 1 .232481s ( 17 .039 KiB/s ) ** Programming Finished ** ** Verify Started ** target halted due to breakpoint, current mode: Thread xPSR: 0x61000000 pc: 0x2000002e msp: 0x20004ffc target halted due to breakpoint, current mode: Thread xPSR: 0x61000000 pc: 0x2000002e msp: 0x20004ffc verified 20656 bytes in 0 .355877s ( 56 .682 KiB/s ) ** Verified OK ** ** Resetting Target ** shutdown command invoked make [ 1 ] : Leaving directory '/home/hamid/repositories/GOKART/gokart_vcu'","title":"Flash VCPU"},{"location":"dev/#debug-messages","text":"To see the debug messages that are shown in the serial port with logger.error() function: sudo miniterm /dev/ttyUSB0 115200 [ 33 ; 1m [ WARNING ] \u241b [ 0m No message from CAN. Restarting MCP2515","title":"Debug messages"},{"location":"dev/#ssh-keys","text":"There are already one ssh key added as an auithorized key to the gokart. copy the content of /protectedDocuments/SSHKeys ( Protected document ) to ~/.ssh/ directory. You will be able to connect to gokart without using password as below ssh gokart1@dobby.local As an example you can shutdown the jetson board like this: ssh gokart1@dobby.local \"shutdown -h now\"","title":"SSH keys"},{"location":"dev/#patches","text":"Patches for fixing the issue with remote control void RcView::updateSpeedPulse() { speedData_ = RC_SPEED_INPUT.get(); if(speedData_ == 1 && previousSpeedData_ != 1) { speedStartTime_ = get_system_time_ns(); } else if(speedData_ == 0 && previousSpeedData_ == 1) { speedEndTime_ = get_system_time_ns(); if(speedEndTime_ - speedStartTime_ > minSpeedPulse_ && speedEndTime_ - speedStartTime_ < maxSpeedPulse_) //Remove all misscalculations when timer overflows. { speedPulse_ = speedEndTime_ - speedStartTime_; float speedReq = linearConversion(speedPulse_, minSpeedPulse_, maxSpeedPulse_, 0, 1); if (speedReq > 1) speedReq = 1; else if (speedReq < 0) speedReq = 0; if(speedReq > 0.55) //Acceleration signal { speedReq = (speedReq - 0.55) / (0.45); gokartModel_->setSpeedRequest(speedReq); } else if(speedReq < 0.45) //brake signal { float brake_req = (speedReq / 0.45); gokartModel_->setBrakeRequest(brake_req); } else { gokartModel_->setSpeedRequest(0); gokartModel_->setBrakeRequest(0); } } } previousSpeedData_ = speedData_; } The left steering is not implemented correctly or NOT at all gokart_controller / gokart_controller.py def set_power_enable(self): raise NotImplementedError def set_speed(self, speed): raise NotImplementedError def set_turn_rate(self, degrees): raise NotImplementedError last commit on gokart/Gokart_VCU src/controllers/GokartController.cpp - #define minTurnPWM_ 0.069 - #define maxTurnPWM_ 0.051 + #define minTurnPWM_ 0.074 + #define maxTurnPWM_ 0.047 src/views/RcView.h - static const int minTurnPulse_ = 1130000; - static const int maxTurnPulse_ = 1930000; + static const int minTurnPulse_ = 1050000; + static const int maxTurnPulse_ = 1850000;","title":"Patches"},{"location":"interfaces/","text":"Interfaces and Sensors \u00b6 There are several sensor installed on Infotiv Autonomous Platform Camera (Raspberry Pi Camera V2 Video Module ) Ultrasonic (Ultrasonic Sensor HC-SR04) Lidar (RPLidar A2M6) Radar (XR112 RADAR SENSOR MODULE W/FLEX CABLE) Wheel speed sensors (Rpm sensors) Sonar sensors IMU Robot Operating System (ROS) \u00b6 The user interfaces with ADAS through the terminal of a Linux-computer running ROS (Robot Operating System). A python-script on the computer calls ROS methods to publish and subscribe to \u201dtopics\u201d. On ADAS a CAN-gateway is running that converts ROS-topics into CAN-messages and vice versa. The computer connects to ADAS via wifi. By setting the data of a ROS-topic that corresponds to a CAN-message sent out by ADAS, the user can control other units that listens to the CAN-message. The CEM unit receives CAN-messages from ADAS requesting changes in Body Electronics (headlight, taillight, blinkers, horn, moodlight) behaviour. Depending on the state of the Power Mode, the changes are performed or denied. Requests to change the Power Mode can come from ADAS, or from a physical interface with buttons and a screen on the Gokart. This ECU, named DIM, sends CAN-messages requesting Power Mode changes, and receives CAN-messages from CEM with the updated Power Mode State. The screen shows the updated Power Mode State. The user can also subscribe to topics corresponding to CAN-messages received on ADAS. Part of the Body Electronics Intern Package is the Sonar Sensors Module (SSM) which is hosting six Sonar sensors that put out distance data. SSM converts the data to CAN-messages, which are transmitted to the bus and received by ADAS. Using the python script or the rostopic echo method on the computer, the user can monitor the sonar distance data in real time. Can publisher http://dobby.local:35991 Version: melodic Installing ROS ROS topics \u00b6 rostopic list /A2/scan /Acc_X /Acc_Y /Acc_Z /Blinker_ADAS_Request /Blinker_TEM_Request /Brakelight_ADAS_Request /Brakelight_TEM_Request /Brakelight_VCU_Request /Car_Speed /Car_TurnRate /Car_brake /Filler /Gyro_X /Gyro_Y /Gyro_Z /Headlight_ADAS_request /Headlight_TEM_Request /HeartBeat_ADAS_Counter /HeartBeat_ADAS_DK_Counter /HeartBeat_ADAS_DK_health /HeartBeat_ADAS_health /HeartBeat_BMS_Counter /HeartBeat_BMS_health /HeartBeat_CEM_Counter /HeartBeat_CEM_health /HeartBeat_TEM_Counter /HeartBeat_TEM_health /HeartBeat_VCU_Counter /HeartBeat_VCU_health /Horn_ADAS_Request /Horn_TEM_Request /Mag_X /Mag_Y /Mag_Z /Moodlight_request_ADAS /Moodlight_request_TEM /Motor_current /Name /Pose_Azimuth /Pose_Heading /Pose_Roll /Power_Enable_channel_1 /Power_Enable_channel_2 /Power_Enable_channel_3 /Power_Enable_channel_4 /Power_Mode_Key_state /Power_Mode_Request_ADAS /Power_Mode_Request_CEM_dk /Power_Mode_Status /Power_Mode_UB /Power_Status_channel_1 /Power_Status_channel_2 /Power_Status_channel_3 /Power_Status_channel_4 /Prop_voltage_cell_1 /Prop_voltage_cell_2 /Prop_voltage_cell_3 /Prop_voltage_cell_4 /S1/scan /Sonar1_Reading /Sonar2_Reading /Sonar3_Reading /Sonar4_Reading /Sonar5_Reading /Sonar6_Reading /Speed_Request_Speed /Speed_Request_Turn /Speed_request_brake /Systems_voltage_cell_1 /Systems_voltage_cell_2 /Wheel_Speed_FL /Wheel_Speed_FR /Wheel_Speed_RL /Wheel_Speed_RR /Wheel_Torque_Left /Wheel_Torque_Right /imu /prop_voltage_total /rosout /rosout_agg /systems_voltage_total /usb_cam/camera_info /usb_cam/image_color /usb_cam/image_color/compressed /usb_cam/image_color/compressed/parameter_descriptions /usb_cam/image_color/compressed/parameter_updates /usb_cam/image_mono /usb_cam/image_mono/compressed /usb_cam/image_mono/compressed/parameter_descriptions /usb_cam/image_mono/compressed/parameter_updates /usb_cam/image_proc_debayer/parameter_descriptions /usb_cam/image_proc_debayer/parameter_updates /usb_cam/image_proc_rectify_color/parameter_descriptions /usb_cam/image_proc_rectify_color/parameter_updates /usb_cam/image_proc_rectify_mono/parameter_descriptions /usb_cam/image_proc_rectify_mono/parameter_updates /usb_cam/image_raw /usb_cam/image_raw/compressed /usb_cam/image_raw/compressed/parameter_descriptions /usb_cam/image_raw/compressed/parameter_updates /usb_cam/image_rect /usb_cam/image_rect/compressed /usb_cam/image_rect/compressed/parameter_descriptions /usb_cam/image_rect/compressed/parameter_updates /usb_cam/image_rect_color /usb_cam/image_rect_color/compressed /usb_cam/image_rect_color/compressed/parameter_descriptions /usb_cam/image_rect_color/compressed/parameter_updates Steering \u00b6 # turn left export ROS_MASTER_URI=http://192.168.150.120:11311 export ROS_IP=192.168.150.107 source /opt/ros/noetic/setup.bash rostopic pub /Speed_Request_Turn std_msgs/Float32 10 # middle rostopic pub /Speed_Request_Turn std_msgs/Float32 0 # right NOT WORKING rostopic pub /Speed_Request_Turn std_msgs/Float32 '{data: -1.0}' Throttle \u00b6 rostopic pub Speed_Request_Speed std_msgs/Float32 100 rostopic pub Speed_Request_Speed std_msgs/Float32 100 rostopic pub Speed_Request_Speed std_msgs/Float32 255 Headlight \u00b6 rostopic pub Headlight_ADAS_request std_msgs/Float32 255 rostopic pub Headlight_ADAS_request std_msgs/Float32 55 rostopic pub Headlight_ADAS_request std_msgs/Float32 1 rostopic pub Headlight_ADAS_request std_msgs/Float32 12 rostopic pub ADAS_Blinker_Request std_msgs/Float32 100 Reading Different Parameters \u00b6 rostopic echo /Wheel_Speed_FL rostopic echo /Sonar3_Reading rostopic echo /Acc_X rostopic echo /Mag_Z rostopic echo /Gyro_X rostopic echo /Gyro_Y rostopic echo /Gyro_Z rostopic echo /Wheel_Torque_Left reading IMU \u00b6 rostopic echo /imu --- header: seq: 164533 stamp: secs: 1654607443 nsecs: 893239650 frame_id: \"imu_link\" orientation: x: 0.0 y: 0.0 z: 0.0 w: 0.0 orientation_covariance: [-1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] angular_velocity: x: 0.00159784952799 y: 0.0186415778266 z: 0.00133154127333 angular_velocity_covariance: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] linear_acceleration: x: -0.372805164196 y: -0.958384979982 z: -9.34410371352 linear_acceleration_covariance: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] CAN \u00b6 A Controller Area Network (CAN bus) is a robust vehicle bus standard designed to allow microcontrollers and devices to communicate with each other's applications without a host computer. It is a message-based protocol, designed originally for multiplex electrical wiring within automobiles to save on copper, but it can also be used in many other contexts. For each device, the data in a frame is transmitted sequentially but in such a way that if more than one device transmits at the same time, the highest priority device can continue while the others back off. Frames are received by all devices, including by the transmitting device. See signal detailed information /Signals ( Protected document ) Propulsion Frames \u00b6 Name Signals DLC ID Source Module Period Wheel Speeds 1 8 0x01 VCU 0.01 Wheel Speeds 2 8 0x01 VCU 0.01 Wheel Speeds 3 8 0x01 VCU 0.01 Wheel Speeds 4 8 0x01 VCU 0.01 Motor VI 5 4 0x02 BMS 0.01 Motor VI 46 4 0x02 BMS 0.01 Power Status 10 1 0x03 BMS 0.1 Power Status 11 1 0x03 BMS 0.1 Power Status 12 1 0x03 BMS 0.1 Infotainment Frames \u00b6 Name Signals DLC ID Source Module Period Wheel Speeds 1 8 0x01 CEM 0.01 Wheel Speeds 2 8 0x01 CEM 0.01 Wheel Speeds 3 8 0x01 CEM 0.01 Wheel Speeds 4 8 0x01 CEM 0.01 Motor VI 5 4 0x02 CEM 0.01 Motor VI 46 4 0x02 CEM 0.01 Power Status 10 1 0x03 CEM 0.01 Power Status 11 1 0x03 CEM 0.01 Power Status 12 1 0x03 CEM 0.01 Safety Frames \u00b6 Name Signals DLC ID Source Module Period Wheel Speeds 1 8 0x01 CEM 0.01 Wheel Speeds 2 8 0x01 CEM 0.01 Wheel Speeds 3 8 0x01 CEM 0.01 Wheel Speeds 4 8 0x01 CEM 0.01 Motor VI 5 4 0x02 CEM 0.01 Motor VI 46 4 0x02 CEM 0.01 Power Status 10 1 0x03 CEM 0.01 Power Status 11 1 0x03 CEM 0.01 Power Status 12 1 0x03 CEM 0.01 Current Signals \u00b6 Signal Index Signal Name Source Source update period Source Bus Gate to Prop Gate to safety Gate to Info Data type length 1 Wheel Speed_FR VCU 0.01 Prop x x Unsigned 16 2 Wheel Speed_FL VCU 0.01 Prop x x Unsigned 16 3 Wheel Speed_RR VCU 0.01 Prop x x Unsigned 16 4 Wheel Speed_RL VCU 0.01 Prop x x Unsigned 16 5 Motor current BMS Prop x Unsigned 16 6 Power Enable channel 1 VCU Prop bool 1 7 Power Enable channel 2 VCU Prop bool 1 8 Power Enable channel 3 VCU Prop bool 1 9 Power Enable channel 4 VCU Prop bool 1 Checking the interface ifconfig can0: flags=193<UP,RUNNING,NOARP> mtu 72 unspec 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00 txqueuelen 10 (UNSPEC) RX packets 2909974 bytes 14480872 (14.4 MB) RX errors 5471 dropped 0 overruns 0 frame 0 TX packets 611926 bytes 1925794 (1.9 MB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 device interrupt 131 ip -details link show can0 4: can0: <NOARP,UP,LOWER_UP,ECHO> mtu 72 qdisc pfifo_fast state UNKNOWN mode DEFAULT group default qlen 10 link/can promiscuity 0 can <BERR-REPORTING,FD> state ERROR-ACTIVE (berr-counter tx 0 rx 0) restart-ms 0 bitrate 500000 sample-point 0.875 tq 25 prop-seg 34 phase-seg1 35 phase-seg2 10 sjw 1 mttcan: tseg1 2..255 tseg2 0..127 sjw 1..127 brp 1..511 brp-inc 1 dbitrate 2000000 dsample-point 0.750 dtq 25 dprop-seg 7 dphase-seg1 7 dphase-seg2 5 dsjw 1 mttcan: dtseg1 1..31 dtseg2 0..15 dsjw 1..15 dbrp 1..15 dbrp-inc 1 clock 40000000numtxqueues 1 numrxqueues 1 gso_max_size 65536 gso_max_segs 65535 # ## CAREFUL: DON'T TRY THESE sudo ip link set can0 down sudo ip link set can0 type can fd off sudo ip link set can0 type can presume-ack off sudo ip link set can0 type can listen-only sudo ip link set can0 type can listen-only off sudo ip link set can0 up sudo ifconfig can0 txqueuelen 1000 Using can-utils \u00b6 canbusload canbusload can0 canbusload can0@500000 canbusload can0@500000 -rb cansniffer \u00b6 cansniffer can0 -c -t 0 candump \u00b6 candump can0 can0 018 [6] 48 FE 9D FA 13 C2 can0 006 [4] 00 00 00 00 can0 002 [4] 00 00 00 00 can0 001 [8] 00 00 00 00 00 00 00 00 can0 007 [4] E8 03 E8 03 can0 017 [6] FE FF 12 00 0A 00 can0 008 [4] 00 00 00 00 can0 001 [8] 00 00 28 02 00 00 00 00 can0 006 [4] F0 00 2F 00 can0 021 [4] 11 03 00 00 the sniffer device, the arbitration ID, the size of the CAN packet, the CAN data candump can0,123:7FF candump -l can0 # log in a human readable candump -L can0 > out.log samle can dump file cansend \u00b6 cansend can0 007#00CA0000 # steering wheel at 0 degree 007#00710000 # 0 007#00716400 # 1 007#0071C800 # 2 007#00712C01 # 3 007#00719001 # 4 007#0071F401 # 5 007#00712C01 # 3 007#00712C01 # 3 007#00712C01 # 3 007#00712C01 # 3 007#00712C01 # 3 007#00712C01 # 3 007#0071D007 # 20 007#00713408 # 21 007#0071B80B # 21 Simple CAN fuzzer #!/bin/bash while : do rnd = $( hexdump -vn4 -e '4/4 \"%08X\" 1 \"\\n\"' /dev/urandom ) command = \"cansend can0 007# ${ rnd } \" echo $command eval \" $command \" done Wifi interface \u00b6 By default the jetson board is configued to connect to Infolab2 wifi network. The credential for the network is available in /protectedDocuments/Credential.txt ( Protected document ) an IP in the range of 192.168.150.X is usually assigned to the client. nmcli c s Infolab2 ifconfig wlan0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST> mtu 1500 inet 192.168.150.120 netmask 255.255.255.0 broadcast 192.168.150.255 inet6 fe80::5b07:dc97:a15c:2dd2 prefixlen 64 scopeid 0x20<link> ether 00:04:4b:f8:0e:d9 txqueuelen 1000 (Ethernet) RX packets 2545 bytes 526525 (526.5 KB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 2416 bytes 536254 (536.2 KB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 Remote Control \u00b6 It is possible to control the GoKart using Remote Control system. Spektrum DX6e 6CH System w/ AR610 TODO: Picture Sabertooth dual 12A motor driver for R/C Ethernet & Wifi \u00b6 Sensor images \u00b6 Camera (Raspberry Pi Camera V2 Video Module ) \u00b6 sudo systemctl restart roscamera.service rosrun camera_calibration cameracalibrator.py --size 8x6 --square 0 .0254 image: = /usb_cam/image_raw camera: = /usb_cam RPLIDAR \u00b6 sudo systemctl restart roslidar.service rosbag info rostopic info S1/scan Type: sensor_msgs/LaserScan Publishers: * /S1/S1_lidar_node (http://dobby.local:45831/) rostopic echo /S1/scan header: seq: 38234 stamp: secs: 1655207346 nsecs: 132279801 frame_id: \"s1_lidar\" angle_min: -3.12413907051 angle_max: 3.14159274101 angle_increment: 0.0174532923847 time_increment: 0.000337733508786 scan_time: 0.12124633044 range_min: 0.15000000596 range_max: 40.0 ranges: [5.738749980926514, inf, 5.3042497634887695, 5.1595001220703125, 5.040999889373779, 5.0395002365112305, inf, 1.7589999437332153, 1.7345000505447388, 1.715000033378601, 1.7005000114440918, 1.6649999618530273, 1.6069999933242798, 1.5815000534057617, 1.5467499494552612, inf, 1.5080000162124634, 1.4865000247955322, 1.4709999561309814, 1.465999960899353, 1.4470000267028809, inf, 1.281999945640564, 1.25600004196167, 1.2569999694824219, 1.2569999694824219, 1.2625000476837158, 3.7314999103546143, 3.700500011444092, 3.6470000743865967, 3.622499942779541, 3.5824999809265137, inf, 3.5139999389648438, 3.467750072479248, 3.440500020980835, 3.407249927520752, 3.4214999675750732, 3.5199999809265137, 3.625999927520752, 3.8010001182556152, 6.427999973297119, 6.562250137329102, 6.514500141143799, 6.487750053405762, 6.4644999504089355, 3.1530001163482666, 3.1619999408721924, 3.1579999923706055, 3.146749973297119, 3.1312499046325684, 3.125499963760376, 3.1010000705718994, 3.070499897003174, 3.0769999027252197, 3.05649995803833, inf, inf, inf, 3.053499937057495, 3.0607500076293945, 3.0567500591278076, 3.0587499141693115, inf, inf, inf, 0.3840000033378601, inf, inf, inf, inf, 0.2904999852180481, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, 0.2994999885559082, 0.3075000047683716, inf, inf, inf, 0.3005000054836273, inf, inf, 0.3305000066757202, 0.3310000002384186, 0.31150001287460327, inf, inf, inf, 0.3440000116825104, inf, inf, inf, 1.0379999876022339, inf, inf, inf, 0.4375, inf, inf, inf, inf, inf, inf, inf, 0.45750001072883606, inf, inf, inf, 0.6324999928474426, inf, inf, inf, inf, inf, inf, 0.9892500042915344, inf, 1.0232499837875366, 1.0405000448226929, 1.0410000085830688, 1.0245000123977661, 1.0299999713897705, 1.0099999904632568, inf, 1.0234999656677246, 1.006500005722046, 1.0240000486373901, 0.9934999942779541, 0.9955000281333923, inf, 0.9480000138282776, 0.9564999938011169, inf, 0.9340000152587891, 0.9325000047683716, 0.9290000200271606, 0.9135000109672546, inf, 0.8295000195503235, inf, inf, inf, inf, inf, 2.8320000171661377, 2.8369998931884766, 2.779249906539917, 2.7622499465942383, 2.7699999809265137, 2.8217499256134033, 2.822499990463257, 2.8420000076293945, 2.8469998836517334, 2.8627500534057617, 2.8897500038146973, 2.9010000228881836, 2.9054999351501465, 2.9195001125335693, 2.9412500858306885, 2.9560000896453857, 2.9855000972747803, 3.01200008392334, 3.0320000648498535, 3.0425000190734863, inf, 3.1015000343322754, 3.1510000228881836, 3.1575000286102295, inf, 1.4184999465942383, 1.3654999732971191, 1.3344999551773071, 1.3025000095367432, 1.2829999923706055, 1.2575000524520874, 1.2174999713897705, 1.1855000257492065, 1.1469999551773071, inf, 1.1080000400543213, 1.0770000219345093, inf, 1.0440000295639038, 1.0210000276565552, 1.0015000104904175, 0.9695000052452087, 0.968500018119812, 0.9539999961853027, 0.9440000057220459, 0.9254999756813049, 0.9129999876022339, 0.8974999785423279, 0.8837500214576721, 0.8809999823570251, 0.878250002861023, 0.8600000143051147, 0.859000027179718, 0.8560000061988831, 0.8495000004768372, 0.8370000123977661, 0.8324999809265137, 0.8289999961853027, 0.828499972820282, 0.8084999918937683, 0.8052499890327454, inf, 0.800000011920929, 0.796500027179718, 0.7900000214576721, 0.7804999947547913, 0.7785000205039978, 0.7789999842643738, 0.7557500004768372, inf, 0.7582499980926514, 0.7584999799728394, 0.7605000138282776, 0.7590000033378601, 0.7674999833106995, inf, 0.7490000128746033, 0.7689999938011169, 0.7645000219345093, 0.7710000276565552, 0.7772499918937683, 0.7797499895095825, 0.7699999809265137, 0.7804999947547913, 0.7792500257492065, 0.7799999713897705, 0.7770000100135803, 0.7764999866485596, 0.7742499709129333, 0.7817500233650208, 0.7835000157356262, 0.784250020980835, inf, 0.781000018119812, 0.7900000214576721, 0.7929999828338623, 0.8075000047683716, 0.7994999885559082, 0.8287500143051147, 0.8199999928474426, inf, 2.6075000762939453, 2.628000020980835, 2.652250051498413, 2.661750078201294, 2.680999994277954, inf, 3.762500047683716, 3.7760000228881836, 3.823499917984009, 3.8510000705718994, 3.467750072479248, 3.4159998893737793, inf, 2.8989999294281006, 2.937000036239624, inf, 2.999500036239624, 3.041249990463257, 3.084749937057495, 3.11299991607666, 3.130000114440918, 3.256999969482422, 3.4195001125335693, 3.452500104904175, 3.494499921798706, 3.5517499446868896, 3.609999895095825, 3.6675000190734863, 3.749500036239624, 3.816999912261963, 3.867000102996826, 3.9372498989105225, inf, 4.7245001792907715, 4.758749961853027, 4.143750190734863, 4.214749813079834, 4.3082499504089355, 4.4054999351501465, inf, 5.169250011444092, 5.096499919891357, 5.269000053405762, 5.309999942779541, 5.524499893188477, inf, 5.901500225067139, 7.351500034332275, 7.315249919891357, 7.290500164031982, 6.915999889373779, 7.222249984741211, 7.906499862670898, inf, 9.595499992370605, 9.604999542236328, 9.589500427246094, 1.9175000190734863, inf, inf, 10.411999702453613, 10.246999740600586, inf, 11.911999702453613, 11.87024974822998, 11.87024974822998, 11.842249870300293, 11.840499877929688, 11.823249816894531, 11.814499855041504, inf, 11.484000205993652, 11.409250259399414, 11.30774974822998, 11.21150016784668, 11.138999938964844, 10.937000274658203, 10.850000381469727, 10.795000076293945, 10.713500022888184, 10.570500373840332, 10.490750312805176, 10.334250450134277, 10.152999877929688, 10.184499740600586, 10.198749542236328, inf, 10.114999771118164, inf, 10.038000106811523, 9.178000450134277, 8.848999977111816, 8.53600025177002, inf, 7.877500057220459, 7.632500171661377, 7.201000213623047, 6.0329999923706055, 5.880499839782715] intensities: [47.0, 0.0, 47.0, 47.0, 47.0, 47.0, 0.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 0.0, 47.0, 47.0, 47.0, 47.0, 47.0, 0.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 0.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 0.0, 0.0, 0.0, 47.0, 47.0, 47.0, 47.0, 0.0, 0.0, 0.0, 47.0, 0.0, 0.0, 0.0, 0.0, 47.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 47.0, 47.0, 0.0, 0.0, 0.0, 47.0, 0.0, 0.0, 47.0, 47.0, 47.0, 0.0, 0.0, 0.0, 47.0, 0.0, 0.0, 0.0, 47.0, 0.0, 0.0, 0.0, 47.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 47.0, 0.0, 0.0, 0.0, 47.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 47.0, 0.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 0.0, 47.0, 47.0, 47.0, 47.0, 47.0, 0.0, 47.0, 47.0, 0.0, 47.0, 47.0, 47.0, 47.0, 0.0, 47.0, 0.0, 0.0, 0.0, 0.0, 0.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 0.0, 47.0, 47.0, 47.0, 0.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 0.0, 47.0, 47.0, 0.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 0.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 0.0, 47.0, 47.0, 47.0, 47.0, 47.0, 0.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 0.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 0.0, 47.0, 47.0, 47.0, 47.0, 47.0, 0.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 0.0, 47.0, 47.0, 0.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 0.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 0.0, 47.0, 47.0, 47.0, 47.0, 47.0, 0.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 0.0, 47.0, 47.0, 47.0, 47.0, 0.0, 0.0, 47.0, 47.0, 0.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 0.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 0.0, 47.0, 0.0, 47.0, 47.0, 47.0, 47.0, 0.0, 47.0, 47.0, 47.0, 47.0, 47.0] --- Wheel Speed Sensor \u00b6 Ultrasonic (Ultrasonic Sensor HC-SR04) \u00b6 MPU-9250 IMU (Inertial measurement unit) \u00b6 XR112 RADAR SENSOR MODULE W/FLEX CABLE \u00b6","title":"Interfaces and Sensors"},{"location":"interfaces/#interfaces-and-sensors","text":"There are several sensor installed on Infotiv Autonomous Platform Camera (Raspberry Pi Camera V2 Video Module ) Ultrasonic (Ultrasonic Sensor HC-SR04) Lidar (RPLidar A2M6) Radar (XR112 RADAR SENSOR MODULE W/FLEX CABLE) Wheel speed sensors (Rpm sensors) Sonar sensors IMU","title":"Interfaces and Sensors"},{"location":"interfaces/#robot-operating-system-ros","text":"The user interfaces with ADAS through the terminal of a Linux-computer running ROS (Robot Operating System). A python-script on the computer calls ROS methods to publish and subscribe to \u201dtopics\u201d. On ADAS a CAN-gateway is running that converts ROS-topics into CAN-messages and vice versa. The computer connects to ADAS via wifi. By setting the data of a ROS-topic that corresponds to a CAN-message sent out by ADAS, the user can control other units that listens to the CAN-message. The CEM unit receives CAN-messages from ADAS requesting changes in Body Electronics (headlight, taillight, blinkers, horn, moodlight) behaviour. Depending on the state of the Power Mode, the changes are performed or denied. Requests to change the Power Mode can come from ADAS, or from a physical interface with buttons and a screen on the Gokart. This ECU, named DIM, sends CAN-messages requesting Power Mode changes, and receives CAN-messages from CEM with the updated Power Mode State. The screen shows the updated Power Mode State. The user can also subscribe to topics corresponding to CAN-messages received on ADAS. Part of the Body Electronics Intern Package is the Sonar Sensors Module (SSM) which is hosting six Sonar sensors that put out distance data. SSM converts the data to CAN-messages, which are transmitted to the bus and received by ADAS. Using the python script or the rostopic echo method on the computer, the user can monitor the sonar distance data in real time. Can publisher http://dobby.local:35991 Version: melodic Installing ROS","title":"Robot Operating System (ROS)"},{"location":"interfaces/#ros-topics","text":"rostopic list /A2/scan /Acc_X /Acc_Y /Acc_Z /Blinker_ADAS_Request /Blinker_TEM_Request /Brakelight_ADAS_Request /Brakelight_TEM_Request /Brakelight_VCU_Request /Car_Speed /Car_TurnRate /Car_brake /Filler /Gyro_X /Gyro_Y /Gyro_Z /Headlight_ADAS_request /Headlight_TEM_Request /HeartBeat_ADAS_Counter /HeartBeat_ADAS_DK_Counter /HeartBeat_ADAS_DK_health /HeartBeat_ADAS_health /HeartBeat_BMS_Counter /HeartBeat_BMS_health /HeartBeat_CEM_Counter /HeartBeat_CEM_health /HeartBeat_TEM_Counter /HeartBeat_TEM_health /HeartBeat_VCU_Counter /HeartBeat_VCU_health /Horn_ADAS_Request /Horn_TEM_Request /Mag_X /Mag_Y /Mag_Z /Moodlight_request_ADAS /Moodlight_request_TEM /Motor_current /Name /Pose_Azimuth /Pose_Heading /Pose_Roll /Power_Enable_channel_1 /Power_Enable_channel_2 /Power_Enable_channel_3 /Power_Enable_channel_4 /Power_Mode_Key_state /Power_Mode_Request_ADAS /Power_Mode_Request_CEM_dk /Power_Mode_Status /Power_Mode_UB /Power_Status_channel_1 /Power_Status_channel_2 /Power_Status_channel_3 /Power_Status_channel_4 /Prop_voltage_cell_1 /Prop_voltage_cell_2 /Prop_voltage_cell_3 /Prop_voltage_cell_4 /S1/scan /Sonar1_Reading /Sonar2_Reading /Sonar3_Reading /Sonar4_Reading /Sonar5_Reading /Sonar6_Reading /Speed_Request_Speed /Speed_Request_Turn /Speed_request_brake /Systems_voltage_cell_1 /Systems_voltage_cell_2 /Wheel_Speed_FL /Wheel_Speed_FR /Wheel_Speed_RL /Wheel_Speed_RR /Wheel_Torque_Left /Wheel_Torque_Right /imu /prop_voltage_total /rosout /rosout_agg /systems_voltage_total /usb_cam/camera_info /usb_cam/image_color /usb_cam/image_color/compressed /usb_cam/image_color/compressed/parameter_descriptions /usb_cam/image_color/compressed/parameter_updates /usb_cam/image_mono /usb_cam/image_mono/compressed /usb_cam/image_mono/compressed/parameter_descriptions /usb_cam/image_mono/compressed/parameter_updates /usb_cam/image_proc_debayer/parameter_descriptions /usb_cam/image_proc_debayer/parameter_updates /usb_cam/image_proc_rectify_color/parameter_descriptions /usb_cam/image_proc_rectify_color/parameter_updates /usb_cam/image_proc_rectify_mono/parameter_descriptions /usb_cam/image_proc_rectify_mono/parameter_updates /usb_cam/image_raw /usb_cam/image_raw/compressed /usb_cam/image_raw/compressed/parameter_descriptions /usb_cam/image_raw/compressed/parameter_updates /usb_cam/image_rect /usb_cam/image_rect/compressed /usb_cam/image_rect/compressed/parameter_descriptions /usb_cam/image_rect/compressed/parameter_updates /usb_cam/image_rect_color /usb_cam/image_rect_color/compressed /usb_cam/image_rect_color/compressed/parameter_descriptions /usb_cam/image_rect_color/compressed/parameter_updates","title":"ROS topics"},{"location":"interfaces/#steering","text":"# turn left export ROS_MASTER_URI=http://192.168.150.120:11311 export ROS_IP=192.168.150.107 source /opt/ros/noetic/setup.bash rostopic pub /Speed_Request_Turn std_msgs/Float32 10 # middle rostopic pub /Speed_Request_Turn std_msgs/Float32 0 # right NOT WORKING rostopic pub /Speed_Request_Turn std_msgs/Float32 '{data: -1.0}'","title":"Steering"},{"location":"interfaces/#throttle","text":"rostopic pub Speed_Request_Speed std_msgs/Float32 100 rostopic pub Speed_Request_Speed std_msgs/Float32 100 rostopic pub Speed_Request_Speed std_msgs/Float32 255","title":"Throttle"},{"location":"interfaces/#headlight","text":"rostopic pub Headlight_ADAS_request std_msgs/Float32 255 rostopic pub Headlight_ADAS_request std_msgs/Float32 55 rostopic pub Headlight_ADAS_request std_msgs/Float32 1 rostopic pub Headlight_ADAS_request std_msgs/Float32 12 rostopic pub ADAS_Blinker_Request std_msgs/Float32 100","title":"Headlight"},{"location":"interfaces/#reading-different-parameters","text":"rostopic echo /Wheel_Speed_FL rostopic echo /Sonar3_Reading rostopic echo /Acc_X rostopic echo /Mag_Z rostopic echo /Gyro_X rostopic echo /Gyro_Y rostopic echo /Gyro_Z rostopic echo /Wheel_Torque_Left","title":"Reading Different Parameters"},{"location":"interfaces/#reading-imu","text":"rostopic echo /imu --- header: seq: 164533 stamp: secs: 1654607443 nsecs: 893239650 frame_id: \"imu_link\" orientation: x: 0.0 y: 0.0 z: 0.0 w: 0.0 orientation_covariance: [-1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] angular_velocity: x: 0.00159784952799 y: 0.0186415778266 z: 0.00133154127333 angular_velocity_covariance: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0] linear_acceleration: x: -0.372805164196 y: -0.958384979982 z: -9.34410371352 linear_acceleration_covariance: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]","title":"reading IMU"},{"location":"interfaces/#can","text":"A Controller Area Network (CAN bus) is a robust vehicle bus standard designed to allow microcontrollers and devices to communicate with each other's applications without a host computer. It is a message-based protocol, designed originally for multiplex electrical wiring within automobiles to save on copper, but it can also be used in many other contexts. For each device, the data in a frame is transmitted sequentially but in such a way that if more than one device transmits at the same time, the highest priority device can continue while the others back off. Frames are received by all devices, including by the transmitting device. See signal detailed information /Signals ( Protected document )","title":"CAN"},{"location":"interfaces/#propulsion-frames","text":"Name Signals DLC ID Source Module Period Wheel Speeds 1 8 0x01 VCU 0.01 Wheel Speeds 2 8 0x01 VCU 0.01 Wheel Speeds 3 8 0x01 VCU 0.01 Wheel Speeds 4 8 0x01 VCU 0.01 Motor VI 5 4 0x02 BMS 0.01 Motor VI 46 4 0x02 BMS 0.01 Power Status 10 1 0x03 BMS 0.1 Power Status 11 1 0x03 BMS 0.1 Power Status 12 1 0x03 BMS 0.1","title":"Propulsion Frames"},{"location":"interfaces/#infotainment-frames","text":"Name Signals DLC ID Source Module Period Wheel Speeds 1 8 0x01 CEM 0.01 Wheel Speeds 2 8 0x01 CEM 0.01 Wheel Speeds 3 8 0x01 CEM 0.01 Wheel Speeds 4 8 0x01 CEM 0.01 Motor VI 5 4 0x02 CEM 0.01 Motor VI 46 4 0x02 CEM 0.01 Power Status 10 1 0x03 CEM 0.01 Power Status 11 1 0x03 CEM 0.01 Power Status 12 1 0x03 CEM 0.01","title":"Infotainment Frames"},{"location":"interfaces/#safety-frames","text":"Name Signals DLC ID Source Module Period Wheel Speeds 1 8 0x01 CEM 0.01 Wheel Speeds 2 8 0x01 CEM 0.01 Wheel Speeds 3 8 0x01 CEM 0.01 Wheel Speeds 4 8 0x01 CEM 0.01 Motor VI 5 4 0x02 CEM 0.01 Motor VI 46 4 0x02 CEM 0.01 Power Status 10 1 0x03 CEM 0.01 Power Status 11 1 0x03 CEM 0.01 Power Status 12 1 0x03 CEM 0.01","title":"Safety Frames"},{"location":"interfaces/#current-signals","text":"Signal Index Signal Name Source Source update period Source Bus Gate to Prop Gate to safety Gate to Info Data type length 1 Wheel Speed_FR VCU 0.01 Prop x x Unsigned 16 2 Wheel Speed_FL VCU 0.01 Prop x x Unsigned 16 3 Wheel Speed_RR VCU 0.01 Prop x x Unsigned 16 4 Wheel Speed_RL VCU 0.01 Prop x x Unsigned 16 5 Motor current BMS Prop x Unsigned 16 6 Power Enable channel 1 VCU Prop bool 1 7 Power Enable channel 2 VCU Prop bool 1 8 Power Enable channel 3 VCU Prop bool 1 9 Power Enable channel 4 VCU Prop bool 1 Checking the interface ifconfig can0: flags=193<UP,RUNNING,NOARP> mtu 72 unspec 00-00-00-00-00-00-00-00-00-00-00-00-00-00-00-00 txqueuelen 10 (UNSPEC) RX packets 2909974 bytes 14480872 (14.4 MB) RX errors 5471 dropped 0 overruns 0 frame 0 TX packets 611926 bytes 1925794 (1.9 MB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 device interrupt 131 ip -details link show can0 4: can0: <NOARP,UP,LOWER_UP,ECHO> mtu 72 qdisc pfifo_fast state UNKNOWN mode DEFAULT group default qlen 10 link/can promiscuity 0 can <BERR-REPORTING,FD> state ERROR-ACTIVE (berr-counter tx 0 rx 0) restart-ms 0 bitrate 500000 sample-point 0.875 tq 25 prop-seg 34 phase-seg1 35 phase-seg2 10 sjw 1 mttcan: tseg1 2..255 tseg2 0..127 sjw 1..127 brp 1..511 brp-inc 1 dbitrate 2000000 dsample-point 0.750 dtq 25 dprop-seg 7 dphase-seg1 7 dphase-seg2 5 dsjw 1 mttcan: dtseg1 1..31 dtseg2 0..15 dsjw 1..15 dbrp 1..15 dbrp-inc 1 clock 40000000numtxqueues 1 numrxqueues 1 gso_max_size 65536 gso_max_segs 65535 # ## CAREFUL: DON'T TRY THESE sudo ip link set can0 down sudo ip link set can0 type can fd off sudo ip link set can0 type can presume-ack off sudo ip link set can0 type can listen-only sudo ip link set can0 type can listen-only off sudo ip link set can0 up sudo ifconfig can0 txqueuelen 1000","title":"Current Signals"},{"location":"interfaces/#using-can-utils","text":"canbusload canbusload can0 canbusload can0@500000 canbusload can0@500000 -rb","title":"Using can-utils"},{"location":"interfaces/#cansniffer","text":"cansniffer can0 -c -t 0","title":"cansniffer"},{"location":"interfaces/#candump","text":"candump can0 can0 018 [6] 48 FE 9D FA 13 C2 can0 006 [4] 00 00 00 00 can0 002 [4] 00 00 00 00 can0 001 [8] 00 00 00 00 00 00 00 00 can0 007 [4] E8 03 E8 03 can0 017 [6] FE FF 12 00 0A 00 can0 008 [4] 00 00 00 00 can0 001 [8] 00 00 28 02 00 00 00 00 can0 006 [4] F0 00 2F 00 can0 021 [4] 11 03 00 00 the sniffer device, the arbitration ID, the size of the CAN packet, the CAN data candump can0,123:7FF candump -l can0 # log in a human readable candump -L can0 > out.log samle can dump file","title":"candump"},{"location":"interfaces/#cansend","text":"cansend can0 007#00CA0000 # steering wheel at 0 degree 007#00710000 # 0 007#00716400 # 1 007#0071C800 # 2 007#00712C01 # 3 007#00719001 # 4 007#0071F401 # 5 007#00712C01 # 3 007#00712C01 # 3 007#00712C01 # 3 007#00712C01 # 3 007#00712C01 # 3 007#00712C01 # 3 007#0071D007 # 20 007#00713408 # 21 007#0071B80B # 21 Simple CAN fuzzer #!/bin/bash while : do rnd = $( hexdump -vn4 -e '4/4 \"%08X\" 1 \"\\n\"' /dev/urandom ) command = \"cansend can0 007# ${ rnd } \" echo $command eval \" $command \" done","title":"cansend"},{"location":"interfaces/#wifi-interface","text":"By default the jetson board is configued to connect to Infolab2 wifi network. The credential for the network is available in /protectedDocuments/Credential.txt ( Protected document ) an IP in the range of 192.168.150.X is usually assigned to the client. nmcli c s Infolab2 ifconfig wlan0: flags=4163<UP,BROADCAST,RUNNING,MULTICAST> mtu 1500 inet 192.168.150.120 netmask 255.255.255.0 broadcast 192.168.150.255 inet6 fe80::5b07:dc97:a15c:2dd2 prefixlen 64 scopeid 0x20<link> ether 00:04:4b:f8:0e:d9 txqueuelen 1000 (Ethernet) RX packets 2545 bytes 526525 (526.5 KB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 2416 bytes 536254 (536.2 KB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0","title":"Wifi interface"},{"location":"interfaces/#remote-control","text":"It is possible to control the GoKart using Remote Control system. Spektrum DX6e 6CH System w/ AR610 TODO: Picture Sabertooth dual 12A motor driver for R/C","title":"Remote Control"},{"location":"interfaces/#ethernet-wifi","text":"","title":"Ethernet &amp; Wifi"},{"location":"interfaces/#sensor-images","text":"","title":"Sensor images"},{"location":"interfaces/#camera-raspberry-pi-camera-v2-video-module","text":"sudo systemctl restart roscamera.service rosrun camera_calibration cameracalibrator.py --size 8x6 --square 0 .0254 image: = /usb_cam/image_raw camera: = /usb_cam","title":"Camera (Raspberry Pi Camera V2 Video Module )"},{"location":"interfaces/#rplidar","text":"sudo systemctl restart roslidar.service rosbag info rostopic info S1/scan Type: sensor_msgs/LaserScan Publishers: * /S1/S1_lidar_node (http://dobby.local:45831/) rostopic echo /S1/scan header: seq: 38234 stamp: secs: 1655207346 nsecs: 132279801 frame_id: \"s1_lidar\" angle_min: -3.12413907051 angle_max: 3.14159274101 angle_increment: 0.0174532923847 time_increment: 0.000337733508786 scan_time: 0.12124633044 range_min: 0.15000000596 range_max: 40.0 ranges: [5.738749980926514, inf, 5.3042497634887695, 5.1595001220703125, 5.040999889373779, 5.0395002365112305, inf, 1.7589999437332153, 1.7345000505447388, 1.715000033378601, 1.7005000114440918, 1.6649999618530273, 1.6069999933242798, 1.5815000534057617, 1.5467499494552612, inf, 1.5080000162124634, 1.4865000247955322, 1.4709999561309814, 1.465999960899353, 1.4470000267028809, inf, 1.281999945640564, 1.25600004196167, 1.2569999694824219, 1.2569999694824219, 1.2625000476837158, 3.7314999103546143, 3.700500011444092, 3.6470000743865967, 3.622499942779541, 3.5824999809265137, inf, 3.5139999389648438, 3.467750072479248, 3.440500020980835, 3.407249927520752, 3.4214999675750732, 3.5199999809265137, 3.625999927520752, 3.8010001182556152, 6.427999973297119, 6.562250137329102, 6.514500141143799, 6.487750053405762, 6.4644999504089355, 3.1530001163482666, 3.1619999408721924, 3.1579999923706055, 3.146749973297119, 3.1312499046325684, 3.125499963760376, 3.1010000705718994, 3.070499897003174, 3.0769999027252197, 3.05649995803833, inf, inf, inf, 3.053499937057495, 3.0607500076293945, 3.0567500591278076, 3.0587499141693115, inf, inf, inf, 0.3840000033378601, inf, inf, inf, inf, 0.2904999852180481, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, inf, 0.2994999885559082, 0.3075000047683716, inf, inf, inf, 0.3005000054836273, inf, inf, 0.3305000066757202, 0.3310000002384186, 0.31150001287460327, inf, inf, inf, 0.3440000116825104, inf, inf, inf, 1.0379999876022339, inf, inf, inf, 0.4375, inf, inf, inf, inf, inf, inf, inf, 0.45750001072883606, inf, inf, inf, 0.6324999928474426, inf, inf, inf, inf, inf, inf, 0.9892500042915344, inf, 1.0232499837875366, 1.0405000448226929, 1.0410000085830688, 1.0245000123977661, 1.0299999713897705, 1.0099999904632568, inf, 1.0234999656677246, 1.006500005722046, 1.0240000486373901, 0.9934999942779541, 0.9955000281333923, inf, 0.9480000138282776, 0.9564999938011169, inf, 0.9340000152587891, 0.9325000047683716, 0.9290000200271606, 0.9135000109672546, inf, 0.8295000195503235, inf, inf, inf, inf, inf, 2.8320000171661377, 2.8369998931884766, 2.779249906539917, 2.7622499465942383, 2.7699999809265137, 2.8217499256134033, 2.822499990463257, 2.8420000076293945, 2.8469998836517334, 2.8627500534057617, 2.8897500038146973, 2.9010000228881836, 2.9054999351501465, 2.9195001125335693, 2.9412500858306885, 2.9560000896453857, 2.9855000972747803, 3.01200008392334, 3.0320000648498535, 3.0425000190734863, inf, 3.1015000343322754, 3.1510000228881836, 3.1575000286102295, inf, 1.4184999465942383, 1.3654999732971191, 1.3344999551773071, 1.3025000095367432, 1.2829999923706055, 1.2575000524520874, 1.2174999713897705, 1.1855000257492065, 1.1469999551773071, inf, 1.1080000400543213, 1.0770000219345093, inf, 1.0440000295639038, 1.0210000276565552, 1.0015000104904175, 0.9695000052452087, 0.968500018119812, 0.9539999961853027, 0.9440000057220459, 0.9254999756813049, 0.9129999876022339, 0.8974999785423279, 0.8837500214576721, 0.8809999823570251, 0.878250002861023, 0.8600000143051147, 0.859000027179718, 0.8560000061988831, 0.8495000004768372, 0.8370000123977661, 0.8324999809265137, 0.8289999961853027, 0.828499972820282, 0.8084999918937683, 0.8052499890327454, inf, 0.800000011920929, 0.796500027179718, 0.7900000214576721, 0.7804999947547913, 0.7785000205039978, 0.7789999842643738, 0.7557500004768372, inf, 0.7582499980926514, 0.7584999799728394, 0.7605000138282776, 0.7590000033378601, 0.7674999833106995, inf, 0.7490000128746033, 0.7689999938011169, 0.7645000219345093, 0.7710000276565552, 0.7772499918937683, 0.7797499895095825, 0.7699999809265137, 0.7804999947547913, 0.7792500257492065, 0.7799999713897705, 0.7770000100135803, 0.7764999866485596, 0.7742499709129333, 0.7817500233650208, 0.7835000157356262, 0.784250020980835, inf, 0.781000018119812, 0.7900000214576721, 0.7929999828338623, 0.8075000047683716, 0.7994999885559082, 0.8287500143051147, 0.8199999928474426, inf, 2.6075000762939453, 2.628000020980835, 2.652250051498413, 2.661750078201294, 2.680999994277954, inf, 3.762500047683716, 3.7760000228881836, 3.823499917984009, 3.8510000705718994, 3.467750072479248, 3.4159998893737793, inf, 2.8989999294281006, 2.937000036239624, inf, 2.999500036239624, 3.041249990463257, 3.084749937057495, 3.11299991607666, 3.130000114440918, 3.256999969482422, 3.4195001125335693, 3.452500104904175, 3.494499921798706, 3.5517499446868896, 3.609999895095825, 3.6675000190734863, 3.749500036239624, 3.816999912261963, 3.867000102996826, 3.9372498989105225, inf, 4.7245001792907715, 4.758749961853027, 4.143750190734863, 4.214749813079834, 4.3082499504089355, 4.4054999351501465, inf, 5.169250011444092, 5.096499919891357, 5.269000053405762, 5.309999942779541, 5.524499893188477, inf, 5.901500225067139, 7.351500034332275, 7.315249919891357, 7.290500164031982, 6.915999889373779, 7.222249984741211, 7.906499862670898, inf, 9.595499992370605, 9.604999542236328, 9.589500427246094, 1.9175000190734863, inf, inf, 10.411999702453613, 10.246999740600586, inf, 11.911999702453613, 11.87024974822998, 11.87024974822998, 11.842249870300293, 11.840499877929688, 11.823249816894531, 11.814499855041504, inf, 11.484000205993652, 11.409250259399414, 11.30774974822998, 11.21150016784668, 11.138999938964844, 10.937000274658203, 10.850000381469727, 10.795000076293945, 10.713500022888184, 10.570500373840332, 10.490750312805176, 10.334250450134277, 10.152999877929688, 10.184499740600586, 10.198749542236328, inf, 10.114999771118164, inf, 10.038000106811523, 9.178000450134277, 8.848999977111816, 8.53600025177002, inf, 7.877500057220459, 7.632500171661377, 7.201000213623047, 6.0329999923706055, 5.880499839782715] intensities: [47.0, 0.0, 47.0, 47.0, 47.0, 47.0, 0.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 0.0, 47.0, 47.0, 47.0, 47.0, 47.0, 0.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 0.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 0.0, 0.0, 0.0, 47.0, 47.0, 47.0, 47.0, 0.0, 0.0, 0.0, 47.0, 0.0, 0.0, 0.0, 0.0, 47.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 47.0, 47.0, 0.0, 0.0, 0.0, 47.0, 0.0, 0.0, 47.0, 47.0, 47.0, 0.0, 0.0, 0.0, 47.0, 0.0, 0.0, 0.0, 47.0, 0.0, 0.0, 0.0, 47.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 47.0, 0.0, 0.0, 0.0, 47.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 47.0, 0.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 0.0, 47.0, 47.0, 47.0, 47.0, 47.0, 0.0, 47.0, 47.0, 0.0, 47.0, 47.0, 47.0, 47.0, 0.0, 47.0, 0.0, 0.0, 0.0, 0.0, 0.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 0.0, 47.0, 47.0, 47.0, 0.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 0.0, 47.0, 47.0, 0.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 0.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 0.0, 47.0, 47.0, 47.0, 47.0, 47.0, 0.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 0.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 0.0, 47.0, 47.0, 47.0, 47.0, 47.0, 0.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 0.0, 47.0, 47.0, 0.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 0.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 0.0, 47.0, 47.0, 47.0, 47.0, 47.0, 0.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 0.0, 47.0, 47.0, 47.0, 47.0, 0.0, 0.0, 47.0, 47.0, 0.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 0.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 0.0, 47.0, 0.0, 47.0, 47.0, 47.0, 47.0, 0.0, 47.0, 47.0, 47.0, 47.0, 47.0] ---","title":"RPLIDAR"},{"location":"interfaces/#wheel-speed-sensor","text":"","title":"Wheel Speed Sensor"},{"location":"interfaces/#ultrasonic-ultrasonic-sensor-hc-sr04","text":"","title":"Ultrasonic (Ultrasonic Sensor HC-SR04)"},{"location":"interfaces/#mpu-9250-imu-inertial-measurement-unit","text":"","title":"MPU-9250 IMU (Inertial measurement unit)"},{"location":"interfaces/#xr112-radar-sensor-module-wflex-cable","text":"","title":"XR112 RADAR SENSOR MODULE W/FLEX CABLE"},{"location":"issues-todo/","text":"Issue List \u00b6 \u2705 Left & Right wheels are not synced: Possible Solution: Using the backup GoKart may possibly solve this. \u2705 Not possible to turn the wheel to the Left: Found a working solution in the repository \u2705 CAN message cannot be used to control the wheel/speed: Replaying the CAN can move the steering wheel. \u274c System beeping for no reason with Red flashing light 1- Possible Solution: Use remote control (or ROS) to do propulsion operation (steering & speeed) and it changes the beeping patter and light color to orange 2- Possible Solution: internal gyro notices that the device is tilted? \u274c The NVIDIA Jetson TX2 Developer Kit comes with 19v & 4.7A (90W max) power supply. However the external power & possible the battries cannot provide enough power and causes the Jetson to shutdown when wheel/steerin are engaged. \u2705 Kill switch: Fixed in the code. \u274c Extra power supply & battery \u274c Segway supports external batteries (BMS need to be studied throughly) \u2705 OpenPilot POC \u274c OpenPilot 1- Delay \u2705 Documentation 1- \u2705 PDF 2- \u2705 Webpage \u274c Thesis project to upgrade part, documentation, CI \u274c pull request recent changes on VCU \u274c Disable and enable RC in VCU \u274c Find other areas for testing (preferebly with electricity and road line) 1- AstaZero: Far away 2- Other locations? \u274c Open source the project. 1- \u2705 Document as an opensource project for VALU3S 2- PCB boards & codes 3- 3D models \u274c 3D print module for body electronics module \u2705 Kill switch or RC \u274c Implement missing ROS APIs \u274c reenable RC sttering, not sending neutral steering but just L&R (see throttle for inspiration) \u274c Fix carla streering value range \u274c Make a command to stop wheel before killing the openpilot docker process Patches for fixing the issue with remote control void RcView::updateSpeedPulse() { speedData_ = RC_SPEED_INPUT.get(); if(speedData_ == 1 && previousSpeedData_ != 1) { speedStartTime_ = get_system_time_ns(); } else if(speedData_ == 0 && previousSpeedData_ == 1) { speedEndTime_ = get_system_time_ns(); if(speedEndTime_ - speedStartTime_ > minSpeedPulse_ && speedEndTime_ - speedStartTime_ < maxSpeedPulse_) //Remove all misscalculations when timer overflows. { speedPulse_ = speedEndTime_ - speedStartTime_; float speedReq = linearConversion(speedPulse_, minSpeedPulse_, maxSpeedPulse_, 0, 1); if (speedReq > 1) speedReq = 1; else if (speedReq < 0) speedReq = 0; if(speedReq > 0.55) //Acceleration signal { speedReq = (speedReq - 0.55) / (0.45); gokartModel_->setSpeedRequest(speedReq); } else if(speedReq < 0.45) //brake signal { float brake_req = (speedReq / 0.45); gokartModel_->setBrakeRequest(brake_req); } else { gokartModel_->setSpeedRequest(0); gokartModel_->setBrakeRequest(0); } } } previousSpeedData_ = speedData_; } The left steering is not implemented correctly or NOT at all gokart_controller / gokart_controller.py def set_power_enable(self): raise NotImplementedError def set_speed(self, speed): raise NotImplementedError def set_turn_rate(self, degrees): raise NotImplementedError last commit on gokart/Gokart_VCU src/controllers/GokartController.cpp - #define minTurnPWM_ 0.069 - #define maxTurnPWM_ 0.051 + #define minTurnPWM_ 0.074 + #define maxTurnPWM_ 0.047 src/views/RcView.h - static const int minTurnPulse_ = 1130000; - static const int maxTurnPulse_ = 1930000; + static const int minTurnPulse_ = 1050000; + static const int maxTurnPulse_ = 1850000;","title":"Common Issues"},{"location":"issues-todo/#issue-list","text":"\u2705 Left & Right wheels are not synced: Possible Solution: Using the backup GoKart may possibly solve this. \u2705 Not possible to turn the wheel to the Left: Found a working solution in the repository \u2705 CAN message cannot be used to control the wheel/speed: Replaying the CAN can move the steering wheel. \u274c System beeping for no reason with Red flashing light 1- Possible Solution: Use remote control (or ROS) to do propulsion operation (steering & speeed) and it changes the beeping patter and light color to orange 2- Possible Solution: internal gyro notices that the device is tilted? \u274c The NVIDIA Jetson TX2 Developer Kit comes with 19v & 4.7A (90W max) power supply. However the external power & possible the battries cannot provide enough power and causes the Jetson to shutdown when wheel/steerin are engaged. \u2705 Kill switch: Fixed in the code. \u274c Extra power supply & battery \u274c Segway supports external batteries (BMS need to be studied throughly) \u2705 OpenPilot POC \u274c OpenPilot 1- Delay \u2705 Documentation 1- \u2705 PDF 2- \u2705 Webpage \u274c Thesis project to upgrade part, documentation, CI \u274c pull request recent changes on VCU \u274c Disable and enable RC in VCU \u274c Find other areas for testing (preferebly with electricity and road line) 1- AstaZero: Far away 2- Other locations? \u274c Open source the project. 1- \u2705 Document as an opensource project for VALU3S 2- PCB boards & codes 3- 3D models \u274c 3D print module for body electronics module \u2705 Kill switch or RC \u274c Implement missing ROS APIs \u274c reenable RC sttering, not sending neutral steering but just L&R (see throttle for inspiration) \u274c Fix carla streering value range \u274c Make a command to stop wheel before killing the openpilot docker process Patches for fixing the issue with remote control void RcView::updateSpeedPulse() { speedData_ = RC_SPEED_INPUT.get(); if(speedData_ == 1 && previousSpeedData_ != 1) { speedStartTime_ = get_system_time_ns(); } else if(speedData_ == 0 && previousSpeedData_ == 1) { speedEndTime_ = get_system_time_ns(); if(speedEndTime_ - speedStartTime_ > minSpeedPulse_ && speedEndTime_ - speedStartTime_ < maxSpeedPulse_) //Remove all misscalculations when timer overflows. { speedPulse_ = speedEndTime_ - speedStartTime_; float speedReq = linearConversion(speedPulse_, minSpeedPulse_, maxSpeedPulse_, 0, 1); if (speedReq > 1) speedReq = 1; else if (speedReq < 0) speedReq = 0; if(speedReq > 0.55) //Acceleration signal { speedReq = (speedReq - 0.55) / (0.45); gokartModel_->setSpeedRequest(speedReq); } else if(speedReq < 0.45) //brake signal { float brake_req = (speedReq / 0.45); gokartModel_->setBrakeRequest(brake_req); } else { gokartModel_->setSpeedRequest(0); gokartModel_->setBrakeRequest(0); } } } previousSpeedData_ = speedData_; } The left steering is not implemented correctly or NOT at all gokart_controller / gokart_controller.py def set_power_enable(self): raise NotImplementedError def set_speed(self, speed): raise NotImplementedError def set_turn_rate(self, degrees): raise NotImplementedError last commit on gokart/Gokart_VCU src/controllers/GokartController.cpp - #define minTurnPWM_ 0.069 - #define maxTurnPWM_ 0.051 + #define minTurnPWM_ 0.074 + #define maxTurnPWM_ 0.047 src/views/RcView.h - static const int minTurnPulse_ = 1130000; - static const int maxTurnPulse_ = 1930000; + static const int minTurnPulse_ = 1050000; + static const int maxTurnPulse_ = 1850000;","title":"Issue List"},{"location":"missing/","text":"Mssing documents \u00b6 Step motor for steering information CAN signals NVidia SW configuration and setup","title":"Missing"},{"location":"missing/#mssing-documents","text":"Step motor for steering information CAN signals NVidia SW configuration and setup","title":"Mssing documents"},{"location":"platform/","text":"Automotive Platform ECUs \u00b6 Automotive Platform consist of several ECUs and the purpose of these ECUs (CEM, ADAS, BMS, ECM/VCU, OBC, DC/DC, IHU, TEM) are best described in /protectedDocuments/Infotiv Research and Education Go-kart Platform/Old Product & Functional Description of IES Education platform.docx ( Protected document ) System Overview: The platform includes three different CAN bus-systems: Propulsion CAN Safety CAN Infotainment CAN The communication between these three CAN buses shall all be routed through the CEM, which will act as gateway and general body electronics module. ECU function level \u00b6 CEM \u00b6 Gateway functionality between the three buses ADAS \u00b6 Read input from ADAS sensors (Ultrasonic, Vision, LIDAR, Radar) Copy functionality from previous car platforms and educations regarding ADAS sensors Be able to send propulsive request to the ECM/VCU (through CEM) BMS \u00b6 Read battery voltage (generate simplified SOC) Be able to control HV-battery contactors (on/off) Be able to communicate with CEM and ECM/VCU SOC value Battery contactor status etc ECM/VCU \u00b6 Be able to control electrical motors 1, 2, 3 and 4 (speed and steering angle) Receive input from all ECUs (from CEM) Output applicable signals to ADAS (through CEM) and BMS (directly) Measure speed via speedometer wheel sensors TEM \u00b6 Receive selected signals via CEM Output above signals via WiFi to be able to be received by Android APP Receive signals via WiFi to be sent via CEM to ECM/VCU Emergency STOP (vehicle speed = 0) Basic communication with ADAS through Ethernet OBC \u00b6 Connection to BMS via LIN through ECM/VCU Physical connection to HV-battery DC/DC \u00b6 Connection to BMS via LIN through ECM/VCU Physical connection to HV-battery Physical connection to LV-battery IHU (Part of physical TEM) \u00b6 Output signals via WiFi to be able to be received by external IHU External Infotainment System \u00b6 DIM (Drive Information Module) IHU (Infotainment Head Unit) Schematic (Kicad) for ADAS and VCU protectedDocuments/2019 - Praktik, Elschema och BOM f\u00f6r bilpltform/Platform V1/Kicad/Schematics ( Protected document ) ADAS-cache.lib 'Blinkers fram.sch-bak' DC-DC-cache.lib ADAS.pro BMS-cache.lib 'DC-DC converter.pro' ADAS-rescue.dcm BMS.pro DC-DC.pro ADAS-rescue.lib BMS.sch DC-DC.sch ADAS.sch CAN-BUS-cache.lib DC-DC.sch-bak ADAS.sch-bak CAN-BUS.pro sym-lib-table BlinkersBak-cache.lib CAN-BUS.sch VCU-cache.lib BlinkersBak.pro CAN-BUS.sch-bak VCU.pro BlinkersBak.sch CEM-cache.lib VCU.sch 'Blinkers fram-cache.lib' CEM.pro VCU.sch-bak 'Blinkers fram.pro' CEM.sch 'Blinkers fram.sch' CEM.sch-bak Schematic ( PDF format) for ADAS, VCU, BMS, CAN Interface protectedDocuments/2019 - Praktik, Elschema och BOM f\u00f6r bilplatform/Platform V2 ( Protected document ) ADAS.pdf BMS.pdf CAN-BUS.pdf CEM.pdf DC-DC.pdf VCU.pdf Software Level \u00b6 The ADAS software is written in Python while the ADAS DK aswell as the other ECU\u2019s software is written in c++. ADAS \u00b6 On boot the ADAS launches its server. The server script, car_server.py, starts two threads, one publisher thread and one reply thread. The publisher thread publishes sensor data and the reply thread awaits commands and then executes the commands. The two reply threads are used for slightly different things. One is used to send set speed/turn rate commands to the ADAS and to forward I/O messages to the CEM. The other is used to send config data to whatever infotainment system require it. CEM \u00b6 The CEM listens to the CAN bus and analyses each message. Based on a list of signals it matches the messages to a certain instruction, e.g. a certain message type is set speed, so it forwards the message onto the propulsion CAN bus for the VCU to handle. The CEM is the central module that keeps track of the state of the entire platform. VCU \u00b6 The VCU is continuously sending wheel speed data to the CAN-bus. It is listening to the CAN bus for speed and turn rate requests and sends them to the PID which eventually modifies the values. BMS \u00b6 The BMS is continuously sending information regarding voltage and current onto the CAN bus. It is also listening on the CAN bus for power mode signals which it handles by switching relays in order to give power to the motor.","title":"Automotive Platform"},{"location":"platform/#automotive-platform-ecus","text":"Automotive Platform consist of several ECUs and the purpose of these ECUs (CEM, ADAS, BMS, ECM/VCU, OBC, DC/DC, IHU, TEM) are best described in /protectedDocuments/Infotiv Research and Education Go-kart Platform/Old Product & Functional Description of IES Education platform.docx ( Protected document ) System Overview: The platform includes three different CAN bus-systems: Propulsion CAN Safety CAN Infotainment CAN The communication between these three CAN buses shall all be routed through the CEM, which will act as gateway and general body electronics module.","title":"Automotive Platform ECUs"},{"location":"platform/#ecu-function-level","text":"","title":"ECU function level"},{"location":"platform/#cem","text":"Gateway functionality between the three buses","title":"CEM"},{"location":"platform/#adas","text":"Read input from ADAS sensors (Ultrasonic, Vision, LIDAR, Radar) Copy functionality from previous car platforms and educations regarding ADAS sensors Be able to send propulsive request to the ECM/VCU (through CEM)","title":"ADAS"},{"location":"platform/#bms","text":"Read battery voltage (generate simplified SOC) Be able to control HV-battery contactors (on/off) Be able to communicate with CEM and ECM/VCU SOC value Battery contactor status etc","title":"BMS"},{"location":"platform/#ecmvcu","text":"Be able to control electrical motors 1, 2, 3 and 4 (speed and steering angle) Receive input from all ECUs (from CEM) Output applicable signals to ADAS (through CEM) and BMS (directly) Measure speed via speedometer wheel sensors","title":"ECM/VCU"},{"location":"platform/#tem","text":"Receive selected signals via CEM Output above signals via WiFi to be able to be received by Android APP Receive signals via WiFi to be sent via CEM to ECM/VCU Emergency STOP (vehicle speed = 0) Basic communication with ADAS through Ethernet","title":"TEM"},{"location":"platform/#obc","text":"Connection to BMS via LIN through ECM/VCU Physical connection to HV-battery","title":"OBC"},{"location":"platform/#dcdc","text":"Connection to BMS via LIN through ECM/VCU Physical connection to HV-battery Physical connection to LV-battery","title":"DC/DC"},{"location":"platform/#ihu-part-of-physical-tem","text":"Output signals via WiFi to be able to be received by external IHU","title":"IHU (Part of physical TEM)"},{"location":"platform/#external-infotainment-system","text":"DIM (Drive Information Module) IHU (Infotainment Head Unit) Schematic (Kicad) for ADAS and VCU protectedDocuments/2019 - Praktik, Elschema och BOM f\u00f6r bilpltform/Platform V1/Kicad/Schematics ( Protected document ) ADAS-cache.lib 'Blinkers fram.sch-bak' DC-DC-cache.lib ADAS.pro BMS-cache.lib 'DC-DC converter.pro' ADAS-rescue.dcm BMS.pro DC-DC.pro ADAS-rescue.lib BMS.sch DC-DC.sch ADAS.sch CAN-BUS-cache.lib DC-DC.sch-bak ADAS.sch-bak CAN-BUS.pro sym-lib-table BlinkersBak-cache.lib CAN-BUS.sch VCU-cache.lib BlinkersBak.pro CAN-BUS.sch-bak VCU.pro BlinkersBak.sch CEM-cache.lib VCU.sch 'Blinkers fram-cache.lib' CEM.pro VCU.sch-bak 'Blinkers fram.pro' CEM.sch 'Blinkers fram.sch' CEM.sch-bak Schematic ( PDF format) for ADAS, VCU, BMS, CAN Interface protectedDocuments/2019 - Praktik, Elschema och BOM f\u00f6r bilplatform/Platform V2 ( Protected document ) ADAS.pdf BMS.pdf CAN-BUS.pdf CEM.pdf DC-DC.pdf VCU.pdf","title":"External Infotainment System"},{"location":"platform/#software-level","text":"The ADAS software is written in Python while the ADAS DK aswell as the other ECU\u2019s software is written in c++.","title":"Software Level"},{"location":"platform/#adas_1","text":"On boot the ADAS launches its server. The server script, car_server.py, starts two threads, one publisher thread and one reply thread. The publisher thread publishes sensor data and the reply thread awaits commands and then executes the commands. The two reply threads are used for slightly different things. One is used to send set speed/turn rate commands to the ADAS and to forward I/O messages to the CEM. The other is used to send config data to whatever infotainment system require it.","title":"ADAS"},{"location":"platform/#cem_1","text":"The CEM listens to the CAN bus and analyses each message. Based on a list of signals it matches the messages to a certain instruction, e.g. a certain message type is set speed, so it forwards the message onto the propulsion CAN bus for the VCU to handle. The CEM is the central module that keeps track of the state of the entire platform.","title":"CEM"},{"location":"platform/#vcu","text":"The VCU is continuously sending wheel speed data to the CAN-bus. It is listening to the CAN bus for speed and turn rate requests and sends them to the PID which eventually modifies the values.","title":"VCU"},{"location":"platform/#bms_1","text":"The BMS is continuously sending information regarding voltage and current onto the CAN bus. It is also listening on the CAN bus for power mode signals which it handles by switching relays in order to give power to the motor.","title":"BMS"},{"location":"projects/","text":"Thesis Projects \u00b6 Requirements: Modular architecture Documentation Test Customers: Interns and Thesis work Resaerch Projects Educational platform for External customer Please contact us if you are interested to work on any of these projects: NextGen Autonomous Platform \u00b6 Upgrading the ECUs (Nvidia Jetson) Simplification and Modularization of electrical body Documnetaion and Test design Verification and Validation \u00b6 Diagnostic system (SIL, unit tests and internal checks) System level Test (HIL) Autonomous Platform Machine Learning Module \u00b6 Using available sensors : ADAS Traffic Sign Detection (Speed limit, ...) Pedestrain Detection Driver Awareness Detection Autonomous Platform Infotainment Dashboard \u00b6 Visualisation Interactive interfaces Autonomous Platform Telematic System \u00b6 Remote Update (Microcontroller and other ECUs) Transmission of Sensor Data (Camera, Lidar, ...) Real time remote control","title":"Thesis Projects"},{"location":"projects/#thesis-projects","text":"Requirements: Modular architecture Documentation Test Customers: Interns and Thesis work Resaerch Projects Educational platform for External customer Please contact us if you are interested to work on any of these projects:","title":"Thesis Projects"},{"location":"projects/#nextgen-autonomous-platform","text":"Upgrading the ECUs (Nvidia Jetson) Simplification and Modularization of electrical body Documnetaion and Test design","title":"NextGen Autonomous Platform"},{"location":"projects/#verification-and-validation","text":"Diagnostic system (SIL, unit tests and internal checks) System level Test (HIL)","title":"Verification and Validation"},{"location":"projects/#autonomous-platform-machine-learning-module","text":"Using available sensors : ADAS Traffic Sign Detection (Speed limit, ...) Pedestrain Detection Driver Awareness Detection","title":"Autonomous Platform Machine Learning Module"},{"location":"projects/#autonomous-platform-infotainment-dashboard","text":"Visualisation Interactive interfaces","title":"Autonomous Platform Infotainment Dashboard"},{"location":"projects/#autonomous-platform-telematic-system","text":"Remote Update (Microcontroller and other ECUs) Transmission of Sensor Data (Camera, Lidar, ...) Real time remote control","title":"Autonomous Platform Telematic System"},{"location":"scope/","text":"System Goal and Scope \u00b6 This project will generate the base for thesis works as well as internship projects. These projects will be designed to further develop the platform and in turn create new projects. These projects will also generate new educations relevant to the area. The technical scope of this project will be ever-changing depending on current market, internal resources and new technology within the automotive industry. It will include, but not limited to, development in areas such as: electrical hardware, mechanical hardware, software, AI, machine learning, PCB design, battery, telematics, embedded systems, electromobility, apps and UX design. The end goal is to have a autonomous Gokart, be it in a controlled test environment and Gokart scaled, that furthers development and research in the autonomus veachle idustry. When the gokart platform reaches a stable state, external research entities could use the platform to test and verify their ideas. The project is limited by size of the Gokart and the speed of the motor (24km/h). The size will impact the overarching HW choice of the platform and thereby the software. Even if the systems will be built with a real car and the SPA platform in mind, deviations from a real car system will be apparent. Also, reliability and quality will differ as many of the projects run on the platform will be first implementations. The development process will also be limited by what test cases can be made as the speed and the built up environments are restricted as the Gokart not road worthy. Testing of the framework will be done in office or in a controlled environment, a Gokart track as example, to simulate real life situations. Restraints caused by the Gokart and Ninebot S SW/HW, such as limited control over individual funtions and lacking documentation regarding the internal mechanisms. The Education platform shall be used to educate staff, and as a second step external customers, in the different techniques that are included in Infotiv's competence areas. The product shall be in form of a small vehicle which shall have the possibility of scalability. Developing an autonomous driving platform that is closer to a real car opens a multitude of developing opportunities as well as increasing the value of the existing project. The research and development done on the new Gokart will face more similar issues as the industry is facing.","title":"Scope and Goal"},{"location":"scope/#system-goal-and-scope","text":"This project will generate the base for thesis works as well as internship projects. These projects will be designed to further develop the platform and in turn create new projects. These projects will also generate new educations relevant to the area. The technical scope of this project will be ever-changing depending on current market, internal resources and new technology within the automotive industry. It will include, but not limited to, development in areas such as: electrical hardware, mechanical hardware, software, AI, machine learning, PCB design, battery, telematics, embedded systems, electromobility, apps and UX design. The end goal is to have a autonomous Gokart, be it in a controlled test environment and Gokart scaled, that furthers development and research in the autonomus veachle idustry. When the gokart platform reaches a stable state, external research entities could use the platform to test and verify their ideas. The project is limited by size of the Gokart and the speed of the motor (24km/h). The size will impact the overarching HW choice of the platform and thereby the software. Even if the systems will be built with a real car and the SPA platform in mind, deviations from a real car system will be apparent. Also, reliability and quality will differ as many of the projects run on the platform will be first implementations. The development process will also be limited by what test cases can be made as the speed and the built up environments are restricted as the Gokart not road worthy. Testing of the framework will be done in office or in a controlled environment, a Gokart track as example, to simulate real life situations. Restraints caused by the Gokart and Ninebot S SW/HW, such as limited control over individual funtions and lacking documentation regarding the internal mechanisms. The Education platform shall be used to educate staff, and as a second step external customers, in the different techniques that are included in Infotiv's competence areas. The product shall be in form of a small vehicle which shall have the possibility of scalability. Developing an autonomous driving platform that is closer to a real car opens a multitude of developing opportunities as well as increasing the value of the existing project. The research and development done on the new Gokart will face more similar issues as the industry is facing.","title":"System Goal and Scope"},{"location":"software/","text":"Gokart Body Electronics \u00b6 In this page you can the source code repository for different components of the system. VCU \u00b6 The VCU is continuously sending wheel speed data to the CAN-bus. It is listening to the CAN bus for speed and turn rate requests and sends them to the PID which eventually modifies the values. CEM for Infotiv AP Gokart and CEM \u00b6 The CEM listens to the CAN bus and analyses each message. Based on a list of signals it matches the messages to a certain instruction, e.g. a certain message type is set speed, so it forwards the message onto the propulsion CAN bus for the VCU to handle. The CEM is the central module that keeps track of the state of the entire platform. Model-view-controller \u00b6 The CEM and SSM are both coded in C++ in the Infotiv Embedded Framework. The system architecture used is Model-view-controller (MVC), a software pattern that aims at separating the data (model) from the parts of the code that alters the data (controller), as well as the presentation of the data (view). In a typical scenario a user gives input to a program on a computer. This input is handled by the controllers methods to manipulate the data in the model. Model is invisible for the user, but the model is responsible for updating view, which is the graphical interface for feedback to the user. In view the data is rendered to a suitable representation for the user. The main argument for separating data from presentation is to avoid that changes in the presentation layer have consequences for the handling of data, and vice versa. MVC is a design pattern that can vary a lot depending on the application. In the case of the CEM, where the presentation of the data could be said to lie in the physical body electronics outside of the microcontroller, a view layer in the code would be unnecessary. Worth noting is also that the input to the controller of the CEM does not come directly from the user, but from some other external unit, like the ADAS, VCU or DIM, which all have their own models and controllers. The user is in other words one ore more steps away compared to the typical scenario above. A takeaway is that when it comes to the models, even though there are more than one model, they all point back to the one instance of the deviceModel that is initialized by the CemModel. The DeviceModel is the register of the CAN-bus(es) and its signals and frames, and when initiated, the data that each signal holds. Looking at the controllers, there is a similar hierarchy in how the CemController has its only function to initialize all the other controllers. Also note that it points to the CemModel to make sure that the signals controlled are those in the one instance of the deviceModel. The main code is simple \u2013 after initializing a cemModel and cemController that initializes everything else, the code iterates over a list of all controllers and calls their update-functions. SSM \u00b6 The ECU responsible for handling the sonar sensors and putting their distance data on the CAN-bus follows the same MVC architecture (without view) as the CEM, only much simpler, with just a SonarModel that points at the DeviceModel, and a SonarController that manipulates the data in the SonarModel. DIM code \u00b6 The Powermode display is built on an arduino nano with C code including the transmit/receive configuration for the CAN communication to the MCP2515 underneath the Powermode buttons. Gokart Platform \u00b6 Gokart_VCU \u00b6 [ADAS] \u00b6 On boot the ADAS launches its server. The server script, car_server.py, starts two threads, one publisher thread and one reply thread. The publisher thread publishes sensor data and the reply thread awaits commands and then executes the commands. The two reply threads are used for slightly different things. One is used to send set speed/turn rate commands to the ADAS and to forward I/O messages to the CEM. The other is used to send config data to whatever infotainment system require it. adas_dk \u00b6 The ADAS software is written in Python while the ADAS DK aswell as the other ECU\u2019s software is written in C++. bms \u00b6 The BMS is continuously sending information regarding voltage and current onto the CAN bus. It is also listening on the CAN bus for power mode signals which it handles by switching relays in order to give power to the motor. SW drivers \u00b6 Drivers for the CAN-Bus module need to be installed on the raspberry. The drivers as well as instructions on how to install them are available at the infotiv wiki Gokart_signal_db \u00b6 Signal database for CAN bus of the IES Gokart. The signal database is an excel file, containing signal and frame definitions for the CAN bus. Signals are all the data that can be communicated, and the frames are how it's done. The name and description is for developer use mostly. The ID is in hex, and needs to be unique for the bus. To add signals to the frame, add the signal indexes from the 'signals' sheet to the 'signals' column as a comma separated list. The 'Period' column specifies the rate at which the data should be sent, where a period of 0.01 is equivalent to 100 Hz. The 'Bus' column is used to differentiate buses in the case there are several on the platform. At the time of writing there is only one, so this can always be left as 1. RosCanBus \u00b6 A CAN bus ROS node that will transcode CAN signals to ROS topics according to a predefined CAN database. Car Controller \u00b6 This repository consists of all files required to make the CarController python package. This python library contains all the essential functions to send and retrieve data from the autonomous platform while working from a remote client. Through this repo, a python package can be made and installed on the remote client or a laptop. The package acts as a backend communication interface to any commands which the user wants to send from the laptop to the autonomous platform regardles of the hardware on it. The following features have been tested and functioning: 1) Handles all the wireless communication through zmq 2) Gets the current signal information from the car. 3) The power to the motors can be switched on and off. The speed and turnrate can be set 4) Supports communication with one camera on board. 5) Takes input from the lidar and generates a map through SLAM. 6) When successfully connected to the server on the autonomous platform, this program will send out a heartbeat to indicate the health of the whole ADAS unit. Gokart_Controller \u00b6 Python wrapper to communicate with ROS using rospy library. Gokart_power_mode_display \u00b6 NVIDIA Jetson Setup files, Gokart_setup \u00b6 ROS subproject containing all setup for the Gokart. (Configuration files, script to launch services on startup ) This repo contains the launch files for starting the Cartographer nodes. It also contains the systemd services used for running roscore , rplidar , and usb_cam . There is a file in the services folder which defines udev rules, which allow us to bind the lidars to /dev/lidar/* which is convenient. The urdf folder contains the URDF (Universal Robot Definition File) for the Gokart. The main launch file used is dobby.launch . It will connect to the cars sensors and start up a graphical session in rviz displaying the Cartographer node's work. cartographer_ws \u00b6 ROS workspace to get cartographer up and running with the IES Gokart. This is intended to be run on a laptop which connects to the Gokart over wifi, not on the Gokart itself. Cartographer can certainly run on the Gokart, but this repositories scripts assume that you have a graphical user interface. Note that this project contains subrepositories! Remember to initialize them using git submodule update --init There are some shell scripts to help you out when getting started: get_carto.sh will download all files required to build cartographer build_carto.sh will build the downloaded files run_carto.sh will run the cartographer nodes Sonar Sensor Module for Gokart \u00b6 urdf file \u00b6 This repo contains the URDF file for the Gokart. The URDF contains all geometrical definitions needed for the robot; eg where all the sensors are mounted. Read more creating your own urdf file here . TEM \u00b6 This camera submodule should be run on the Raspberry Pi, server running on port 5557 Follow instruction to enable CAN drivers on Raspberry Pi lidarServer \u00b6 publish_port = 5553 command_port = 5554 researchplatform \u00b6 running on PI ROS platform \u00b6 camera Server \u00b6 This camera submodule should be run on the Raspberry Pi, running on port 5557 Also see camera_view car_protobufs \u00b6 Car_server \u00b6 See diagrams in the note folder","title":"Software Repositories"},{"location":"software/#gokart-body-electronics","text":"In this page you can the source code repository for different components of the system.","title":"Gokart Body Electronics"},{"location":"software/#vcu","text":"The VCU is continuously sending wheel speed data to the CAN-bus. It is listening to the CAN bus for speed and turn rate requests and sends them to the PID which eventually modifies the values.","title":"VCU"},{"location":"software/#cem-for-infotiv-ap-gokart-and-cem","text":"The CEM listens to the CAN bus and analyses each message. Based on a list of signals it matches the messages to a certain instruction, e.g. a certain message type is set speed, so it forwards the message onto the propulsion CAN bus for the VCU to handle. The CEM is the central module that keeps track of the state of the entire platform.","title":"CEM for Infotiv AP Gokart and CEM"},{"location":"software/#model-view-controller","text":"The CEM and SSM are both coded in C++ in the Infotiv Embedded Framework. The system architecture used is Model-view-controller (MVC), a software pattern that aims at separating the data (model) from the parts of the code that alters the data (controller), as well as the presentation of the data (view). In a typical scenario a user gives input to a program on a computer. This input is handled by the controllers methods to manipulate the data in the model. Model is invisible for the user, but the model is responsible for updating view, which is the graphical interface for feedback to the user. In view the data is rendered to a suitable representation for the user. The main argument for separating data from presentation is to avoid that changes in the presentation layer have consequences for the handling of data, and vice versa. MVC is a design pattern that can vary a lot depending on the application. In the case of the CEM, where the presentation of the data could be said to lie in the physical body electronics outside of the microcontroller, a view layer in the code would be unnecessary. Worth noting is also that the input to the controller of the CEM does not come directly from the user, but from some other external unit, like the ADAS, VCU or DIM, which all have their own models and controllers. The user is in other words one ore more steps away compared to the typical scenario above. A takeaway is that when it comes to the models, even though there are more than one model, they all point back to the one instance of the deviceModel that is initialized by the CemModel. The DeviceModel is the register of the CAN-bus(es) and its signals and frames, and when initiated, the data that each signal holds. Looking at the controllers, there is a similar hierarchy in how the CemController has its only function to initialize all the other controllers. Also note that it points to the CemModel to make sure that the signals controlled are those in the one instance of the deviceModel. The main code is simple \u2013 after initializing a cemModel and cemController that initializes everything else, the code iterates over a list of all controllers and calls their update-functions.","title":"Model-view-controller"},{"location":"software/#ssm","text":"The ECU responsible for handling the sonar sensors and putting their distance data on the CAN-bus follows the same MVC architecture (without view) as the CEM, only much simpler, with just a SonarModel that points at the DeviceModel, and a SonarController that manipulates the data in the SonarModel.","title":"SSM"},{"location":"software/#dim-code","text":"The Powermode display is built on an arduino nano with C code including the transmit/receive configuration for the CAN communication to the MCP2515 underneath the Powermode buttons.","title":"DIM code"},{"location":"software/#gokart-platform","text":"","title":"Gokart Platform"},{"location":"software/#gokart_vcu","text":"","title":"Gokart_VCU"},{"location":"software/#adas","text":"On boot the ADAS launches its server. The server script, car_server.py, starts two threads, one publisher thread and one reply thread. The publisher thread publishes sensor data and the reply thread awaits commands and then executes the commands. The two reply threads are used for slightly different things. One is used to send set speed/turn rate commands to the ADAS and to forward I/O messages to the CEM. The other is used to send config data to whatever infotainment system require it.","title":"[ADAS]"},{"location":"software/#adas_dk","text":"The ADAS software is written in Python while the ADAS DK aswell as the other ECU\u2019s software is written in C++.","title":"adas_dk"},{"location":"software/#bms","text":"The BMS is continuously sending information regarding voltage and current onto the CAN bus. It is also listening on the CAN bus for power mode signals which it handles by switching relays in order to give power to the motor.","title":"bms"},{"location":"software/#sw-drivers","text":"Drivers for the CAN-Bus module need to be installed on the raspberry. The drivers as well as instructions on how to install them are available at the infotiv wiki","title":"SW drivers"},{"location":"software/#gokart_signal_db","text":"Signal database for CAN bus of the IES Gokart. The signal database is an excel file, containing signal and frame definitions for the CAN bus. Signals are all the data that can be communicated, and the frames are how it's done. The name and description is for developer use mostly. The ID is in hex, and needs to be unique for the bus. To add signals to the frame, add the signal indexes from the 'signals' sheet to the 'signals' column as a comma separated list. The 'Period' column specifies the rate at which the data should be sent, where a period of 0.01 is equivalent to 100 Hz. The 'Bus' column is used to differentiate buses in the case there are several on the platform. At the time of writing there is only one, so this can always be left as 1.","title":"Gokart_signal_db"},{"location":"software/#roscanbus","text":"A CAN bus ROS node that will transcode CAN signals to ROS topics according to a predefined CAN database.","title":"RosCanBus"},{"location":"software/#car-controller","text":"This repository consists of all files required to make the CarController python package. This python library contains all the essential functions to send and retrieve data from the autonomous platform while working from a remote client. Through this repo, a python package can be made and installed on the remote client or a laptop. The package acts as a backend communication interface to any commands which the user wants to send from the laptop to the autonomous platform regardles of the hardware on it. The following features have been tested and functioning: 1) Handles all the wireless communication through zmq 2) Gets the current signal information from the car. 3) The power to the motors can be switched on and off. The speed and turnrate can be set 4) Supports communication with one camera on board. 5) Takes input from the lidar and generates a map through SLAM. 6) When successfully connected to the server on the autonomous platform, this program will send out a heartbeat to indicate the health of the whole ADAS unit.","title":"Car Controller"},{"location":"software/#gokart_controller","text":"Python wrapper to communicate with ROS using rospy library.","title":"Gokart_Controller"},{"location":"software/#gokart_power_mode_display","text":"","title":"Gokart_power_mode_display"},{"location":"software/#nvidia-jetson-setup-files-gokart_setup","text":"ROS subproject containing all setup for the Gokart. (Configuration files, script to launch services on startup ) This repo contains the launch files for starting the Cartographer nodes. It also contains the systemd services used for running roscore , rplidar , and usb_cam . There is a file in the services folder which defines udev rules, which allow us to bind the lidars to /dev/lidar/* which is convenient. The urdf folder contains the URDF (Universal Robot Definition File) for the Gokart. The main launch file used is dobby.launch . It will connect to the cars sensors and start up a graphical session in rviz displaying the Cartographer node's work.","title":"NVIDIA Jetson Setup files, Gokart_setup"},{"location":"software/#cartographer_ws","text":"ROS workspace to get cartographer up and running with the IES Gokart. This is intended to be run on a laptop which connects to the Gokart over wifi, not on the Gokart itself. Cartographer can certainly run on the Gokart, but this repositories scripts assume that you have a graphical user interface. Note that this project contains subrepositories! Remember to initialize them using git submodule update --init There are some shell scripts to help you out when getting started: get_carto.sh will download all files required to build cartographer build_carto.sh will build the downloaded files run_carto.sh will run the cartographer nodes","title":"cartographer_ws"},{"location":"software/#sonar-sensor-module-for-gokart","text":"","title":"Sonar Sensor Module for Gokart"},{"location":"software/#urdf-file","text":"This repo contains the URDF file for the Gokart. The URDF contains all geometrical definitions needed for the robot; eg where all the sensors are mounted. Read more creating your own urdf file here .","title":"urdf file"},{"location":"software/#tem","text":"This camera submodule should be run on the Raspberry Pi, server running on port 5557 Follow instruction to enable CAN drivers on Raspberry Pi","title":"TEM"},{"location":"software/#lidarserver","text":"publish_port = 5553 command_port = 5554","title":"lidarServer"},{"location":"software/#researchplatform","text":"running on PI","title":"researchplatform"},{"location":"software/#ros-platform","text":"","title":"ROS platform"},{"location":"software/#camera-server","text":"This camera submodule should be run on the Raspberry Pi, running on port 5557 Also see camera_view","title":"camera Server"},{"location":"software/#car_protobufs","text":"","title":"car_protobufs"},{"location":"software/#car_server","text":"See diagrams in the note folder","title":"Car_server"},{"location":"start/","text":"Caution \u00b6 You cannot turn of the gokart when the wheel are active. Make sure to stop it either using the RC controller or the command below: rostopic pub Speed_Request_Speed std_msgs/Float32 0 Turning on the GoKart \u00b6 Find all host in network with open ssh port nmap -Pn -p22 192 .168.150.1/24 -oG - | grep \"/open\" | awk '{ print $2 }' ssh fingerprint: ssh -X gokart1@dobby.local ECDSA key fingerprint is SHA256:GkO/qyuwj+tCfwaZArQbMS8XsPUA4gfbMJdeTnqG1n4. Access to the camera remotely \u00b6 After updating the configuration file rtsp-simple-server.yml as below paths: cam: runOnInit: ffmpeg -f v4l2 -i /dev/video1 -preset ultrafast -b:v 600k -f rtsp rtsp://localhost:$RTSP_PORT/$RTSP_PATH runOnInitRestart: yes Execute rtsp-simple-server_v0.19.1_linux_arm64v8/ server: ./rtsp-simple-server vlc -vvv --network-caching 200 rtsp://192.168.150.120:8554/cam Battery \u00b6 Using Power supply \u00b6 Tests \u00b6 Remote control \u00b6 The right panel can be used to move forward and make quick brakes. To reverse, double back (brake) reverses the gear. (IT is noticable from the beeping sound)","title":"Start the GoKart"},{"location":"start/#caution","text":"You cannot turn of the gokart when the wheel are active. Make sure to stop it either using the RC controller or the command below: rostopic pub Speed_Request_Speed std_msgs/Float32 0","title":"Caution"},{"location":"start/#turning-on-the-gokart","text":"Find all host in network with open ssh port nmap -Pn -p22 192 .168.150.1/24 -oG - | grep \"/open\" | awk '{ print $2 }' ssh fingerprint: ssh -X gokart1@dobby.local ECDSA key fingerprint is SHA256:GkO/qyuwj+tCfwaZArQbMS8XsPUA4gfbMJdeTnqG1n4.","title":"Turning on the GoKart"},{"location":"start/#access-to-the-camera-remotely","text":"After updating the configuration file rtsp-simple-server.yml as below paths: cam: runOnInit: ffmpeg -f v4l2 -i /dev/video1 -preset ultrafast -b:v 600k -f rtsp rtsp://localhost:$RTSP_PORT/$RTSP_PATH runOnInitRestart: yes Execute rtsp-simple-server_v0.19.1_linux_arm64v8/ server: ./rtsp-simple-server vlc -vvv --network-caching 200 rtsp://192.168.150.120:8554/cam","title":"Access to the camera remotely"},{"location":"start/#battery","text":"","title":"Battery"},{"location":"start/#using-power-supply","text":"","title":"Using Power supply"},{"location":"start/#tests","text":"","title":"Tests"},{"location":"start/#remote-control","text":"The right panel can be used to move forward and make quick brakes. To reverse, double back (brake) reverses the gear. (IT is noticable from the beeping sound)","title":"Remote control"},{"location":"terms/","text":"Glossary of Terms \u00b6 ADAS (Advanced Driver Assistance Module) DIM (Driver Information Module) CEM (Central Electronics Module) DIM (Drive Information Module) IHU (Infotainment Head Unit) IMU (Inertial measurement unit) VCU (Vehicle Control Unit) TEM IHU BMS (Battery monitoring system) ECM ALC (Automated Lane Centering) ACC (Adaptive Cruise Control) FCW (Forward Collision Warning) LDW (Lane Departure Warning)","title":"Glossary of Terms"},{"location":"terms/#glossary-of-terms","text":"ADAS (Advanced Driver Assistance Module) DIM (Driver Information Module) CEM (Central Electronics Module) DIM (Drive Information Module) IHU (Infotainment Head Unit) IMU (Inertial measurement unit) VCU (Vehicle Control Unit) TEM IHU BMS (Battery monitoring system) ECM ALC (Automated Lane Centering) ACC (Adaptive Cruise Control) FCW (Forward Collision Warning) LDW (Lane Departure Warning)","title":"Glossary of Terms"}]}